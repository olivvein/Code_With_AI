
import os
messages=[
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "//appTitle: Draggable Divs App with Blur Effect\nimport React, { useState, useEffect, useRef } from \"https://esm.sh/react\";\nimport ReactDOM from \"https://esm.sh/react-dom\";\nimport { setup as twindSetup } from \"https://cdn.skypack.dev/twind/shim\";\nimport * as Space from \"https://esm.sh/react-spaces\";\nimport Draggable from \"https://esm.sh/react-draggable\";\nimport Editor from \"https://esm.sh/@monaco-editor/react\";\nimport * as Babel from \"https://esm.sh/@babel/standalone\";\nimport OpenAI from \"https://esm.sh/openai\";\nimport { transform as transform } from \"https://esm.sh/sucrase\";\n//import Markdown from \"https://esm.sh/react-markdown@9\";\nimport Markdown from \"https://esm.sh/markdown-to-jsx\";\nimport remarkGfm from \"https://esm.sh/remark-gfm\";\ntwindSetup({\n  darkMode: \"media\",\n  theme: {\n    extend: {\n      backgroundColor: {\n        dark: \"#111827\",\n        light: \"#d4d4d4\",\n      },\n      textColor: {\n        light: \"#d4d4d4\",\n        dark: \"#111827\",\n      },\n      borderColor: {\n        light: \"#d4d4d4\",\n        dark: \"#111827\",\n      },\n      animation: {\n        fade: \"fadeOut 5s ease-in-out\",\n        appear: \"fadeIn 0.2s ease-in-out\",\n      },\n      // that is actual animation\n      keyframes: (theme) => ({\n        fadeOut: {\n          \"0%\": { opacity: \"100%\" },\n          \"100%\": { opacity: \"0%\" },\n        },\n        fadeIn: {\n          \"0%\": { opacity: \"0%\" },\n          \"100%\": { opacity: \"100%\" },\n        },\n      }),\n    },\n  },\n  preflight: {\n    \".cursors-layer > .monaco-mouse-cursor-text\": {\n      position: \"absolute !important\",\n      //color: 'black !important',\n      //'background-color':'white',\n    },\n    \".cursors-layer >  .monaco-mouse-cursor-text::before\": {\n      content: '\"\"',\n      position: \"absolute\",\n      left: \"0\",\n      top: \"0\",\n      bottom: \"0\",\n      width: \"1px\",\n      backgroundColor: \"white\",\n    },\n  },\n});\nconst GuideView = ({ setShowGuideView }) => {\n  const SnippetView = ({ children, ...props }) => {\n    const isJsx =\n      children.indexOf(\"import \") != -1 || children.indexOf(\"const \") != -1\n        ? \"jsx\"\n        : \"html\";\n    return (\n      <>\n        <div\n          {...props}\n          className=\"flex flex-col  dark:bg-black bg-white  rounded-lg\"\n        >\n          <span className=\"w-full top-0 px-4 bg-gray-600 rounded-t-lg flex justify-between\">\n            <span>{isJsx}</span>\n            <span>copy</span>\n          </span>\n          <span className=\"w-full p-4 overflow-scroll\">{children}</span>\n        </div>\n      </>\n    );\n  };\n  const LiView = ({ children, ...props }) => (\n    <>\n      {\" \"}\n      - {children}\n      <br></br>\n    </>\n  );\n  const TheH4 = ({ children, ...props }) => (\n    <div className=\"mt-4\">{children}</div>\n  );\n  const guideMessage = `# User Guide\n## Code Editor\n- Based on Monaco editor (Vs Code) \n- Same shortcut\n- Multiple cursor\n- Syntax Highliting\n  \nYou don't need to install any dependencies\nSimply add it like normaly. In the Babel transpile, all import are appended with \"https://esm.sh\" which host a ton of ES6 modules\n### 3 Files : \n- html : the html template where react components are injected\n- javascript : the react/javascript code\n- Babel : The Executed Code transpiled from React (jsx) to js. Don't modify it as it has no effect. It is just a representation of the transpiled jsx code.\n## App Preview\n- Each time the code is modified, the app preview is updated\n## SaveAs\n- Enter a Name and the project will be saved on App folder\n- A message pop up wen it is successfull (2-10 sec)\n## Deploy\n- Enter a Name and the project deployed as an App \n- A message pop up wen it is successfull (2-10 sec)\n## Chat Settings\nSelect your language model : \n- puter : gpt-3.5-turbo, no streaming, free\n- openAi : every model available, streaming, require api key. The api key is stored in puter kv field openai_api_key. Only the app has access.\n- liteLLM : every model avaliable on litellm[proxy], streaming.\n## Chat View\n- Enter to submit message\n- Shift+Enter to create a new line\n- You can ask the AI what you want to build.\n- If you have specific libraries in mind just tell it.\n- When you press play, Crazy Typing Cat Appears to let you now that the AI is working\n- At the end of the generation , Crazy Typing Cat dissapear, The App Preview is updated with the new code and the message history is shown.\n- The AI remember past message in the same session so you can ask \"Make a cool clock app\" Then when it's done \"Perfect, add a color background animation to it\"\nWhen the code is not working and it will happen, it might be several issue : \n- Code is not completed\n- twindSetup() is not instanciated, just add it after import of tailwind\n- On the console, check the errors, AI often hallucinate a package that does everything perfectly like \n\\`\\`\\`\nimport {TripleAGame} from \"https://esm.sh/triple-a-game\"\n\\`\\`\\`\n## Prompt ingenering\nThe AI is told to be an excellent React Developper\nIt has been provided with several free api url like :\n\\`\\`\\`\nhttps://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&current_weather=true=> \"current_weather\"\nhttps://api.coingecko.com/api \nhttps://api.multiversx.com/economics?extract=price for EGLD=> \"price\"\nhttps://www.francetvinfo.fr/titres.rss => entries \"title\" and \"summary\" and \"links[0] as href \" and \"links[1] as image \" For the News with feedparser library\n\\`\\`\\`\n#### You can provide it more in the message in the same way.\nIf you want to make an interactive game, ask it to use p5.js\nTry using Three.js for 3d graphics (puter ai is not that good for it)\n## Console\na simple javascript console view that show console.log and console.error (in red)\n- require to use JSON.stringify to show objects as it display a string on the console\n ## LiteLLM\n LiteLLM can let you access a lot of llm\n \n - Free : ollama => llama, dolphin-mixtral, mistral, ....\n - Paid : Anthropic Claude, Google AI, Hugginface, Mistral\n install litellm and litellm[proxy]\n\\`\\`\\`sh\npip install litell litellm[proxy]\n\\`\\`\\`\n#### create a config.yaml file like:\n\\`\\`\\`yaml\nmodel_list: \n  - model_name: ollama/dolphin-mistral\n    litellm_params:\n      model: ollama/dolphin-mistral\n  - model_name: ollama/phi\n    litellm_params:\n      model: ollama/phi\n  - model_name: claude-3-opus-20240229\n    litellm_params:\n      model: claude-3-opus-20240229\n      api_key: sk-****************\n\\`\\`\\`\n#### run litellm[proxy]\n\\`\\`\\`sh\nlitellm --config config.yaml\n\\`\\`\\`\n#### It should be running on port 4000\n  `;\n  return (\n    <div className=\"fixed top-0 left-0 w-full h-full dark:bg-dark bg-light dark:text-light text-dark bg-opacity-50 flex flex-col items-center justify-center z-50\">\n      <div className=\"w-3/4 h-3/4 opacity-100 border flex flex-col rounded-lg  overflow-y-hidden justify-between\">\n        <span className=\"w-full top-0  bg-gray-600 rounded-t-lg flex justify-between\">\n          <button\n            onClick={() => {\n              setShowGuideView(false);\n            }}\n            className=\"w-1/4 dark:bg-dark bg-light border rounded-lg px-2\"\n          >\n            About Me\n          </button>\n          <h1>User Guide</h1>\n          <button\n            onClick={() => {\n              setShowGuideView(false);\n            }}\n            className=\"w-1/4 dark:bg-dark bg-light border rounded-lg px-2\"\n          >\n            close\n          </button>\n        </span>\n        <div className=\"w-full h-full overflow-y-scroll p-4\">\n          <Markdown\n            options={{\n              overrides: {\n                h1: {\n                  props: {\n                    className: \"text-lg font-bold py-2\",\n                  },\n                },\n                h2: {\n                  props: {\n                    className: \"text-lg  py-2 underline\",\n                  },\n                },\n                h3: {\n                  props: {\n                    className: \"text-md underline py-2\",\n                  },\n                },\n                h4: {\n                  component: TheH4,\n                  props: {\n                    className: \"py-2\",\n                  },\n                },\n                pre: {\n                  props: {\n                    className:\n                      \"dark:bg-black bg-white dark:text-light text-dark border rounded-lg  mt-3\",\n                  },\n                },\n                code: {\n                  component: SnippetView,\n                },\n                li: {\n                  component: LiView,\n                },\n              },\n            }}\n          >\n            {guideMessage}\n          </Markdown>\n        </div>\n      </div>\n    </div>\n  );\n};\nconst MarkDownView = ({ content, className }) => {\n  const SnippetView = ({ children, ...props }) => {\n    const isJsx =\n      children.indexOf(\"import \") != -1 || children.indexOf(\"const \") != -1\n        ? \"jsx\"\n        : \"html\";\n    return (\n      <>\n        <div\n          {...props}\n          className=\"flex flex-col  dark:bg-black bg-white  rounded-lg\"\n        >\n          <span className=\"w-full top-0 px-2 bg-gray-600 rounded-t-lg flex justify-between\">\n            <span>{isJsx}</span>\n            <span>copy</span>\n          </span>\n          <span className=\"w-full p-4 overflow-scroll\">{children}</span>\n        </div>\n      </>\n    );\n  };\n  const LiView = ({ children, ...props }) => (\n    <>\n      {\" \"}\n      - {children}\n      <br></br>\n    </>\n  );\n  const TheH4 = ({ children, ...props }) => (\n    <div className=\"mt-4\">{children}</div>\n  );\n  return (\n    <Markdown\n      className={className}\n      options={{\n        overrides: {\n          h1: {\n            props: {\n              className: \"text-lg font-bold py-2\",\n            },\n          },\n          h2: {\n            props: {\n              className: \"text-lg  py-2 underline\",\n            },\n          },\n          h3: {\n            props: {\n              className: \"text-md underline py-2\",\n            },\n          },\n          h4: {\n            component: TheH4,\n            props: {\n              className: \"py-2\",\n            },\n          },\n          pre: {\n            props: {\n              className:\n                \"dark:bg-black bg-white dark:text-light text-dark border rounded-lg  mt-3\",\n            },\n          },\n          code: {\n            component: SnippetView,\n          },\n          li: {\n            component: LiView,\n          },\n        },\n      }}\n    >\n      {content}\n    </Markdown>\n  );\n};\nconst ChatSettings = ({\n  chatProvider,\n  setChatProvider,\n  ollamaConfig,\n  setOllamaConfig,\n  openAiCongig,\n  setOpenAiCongig,\n  ollamaAvailable,\n  setApiKeyVal,\n  apiKey,\n  resetApiKey,\n  anthropicAvailable,\n}) => {\n  return (\n    <div className=\"flex flex-col items-center justify-center h-screen\">\n      <div className=\"flex flex-col items-center justify-center\">\n        <h1 className=\"text-4xl font-semibold dark:text-light text-dark\">\n          Chat Settings\n        </h1>\n        <div className=\"flex flex-col items-center justify-center\">\n          <div className=\"flex flex-col items-center justify-center\">\n            <h2 className=\"text-2xl font-semibold dark:text-light text-dark\">\n              Chat Provider\n            </h2>\n            <select\n              value={chatProvider}\n              onChange={(e) => setChatProvider(e.target.value)}\n              className=\"dark:bg-dark bg-light dark:text-light text-dark rounded p-2\"\n            >\n              <option value=\"openai\">OpenAI</option>\n              {anthropicAvailable && <option value=\"anthropic\">Anthropic</option>}\n              {ollamaAvailable && <option value=\"ollama\">LiteLLM</option>}\n              <option value=\"puter\">Puter</option>\n            </select>\n          </div>\n          {chatProvider === \"ollama\" && (\n            <div className=\"flex flex-col items-center justify-center\">\n              <h2 className=\"text-2xl font-semibold dark:text-light text-dark\">\n                Ollama Config\n              </h2>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setOllamaConfig({ ...ollamaConfig, baseURL: e.target.value });\n                }}\n              >\n                <input\n                  //onChange={(e) => setOllamaConfig({ ...ollamaConfig, baseURL: e.target.value })}\n                  className=\"dark:bg-dark bg-light dark:text-light text-dark rounded p-2\"\n                  placeholder=\"Base URL\"\n                />\n              </form>\n              <select\n                value={ollamaConfig.selectedModel}\n                onChange={(e) =>\n                  setOllamaConfig({\n                    ...ollamaConfig,\n                    selectedModel: e.target.value,\n                  })\n                }\n                className=\"dark:bg-dark bg-light dark:text-light text-dark rounded p-2\"\n              >\n                {ollamaConfig.models.map((model) => (\n                  <option value={model.id}>{model.id}</option>\n                ))}\n              </select>\n            </div>\n          )}\n          {chatProvider === \"openai\" && (\n            <div className=\"flex flex-col items-center justify-center\">\n              <h2 className=\"text-2xl font-semibold dark:text-light text-dark\">\n                OpenAI Config\n              </h2>\n              {apiKey === \"\" && (\n                <input\n                  value={apiKey}\n                  onChange={setApiKeyVal}\n                  className=\"dark:bg-dark bg-light dark:text-light text-dark rounded p-2\"\n                  placeholder=\"OpenAI API Key\"\n                />\n              )}\n              {apiKey !== \"\" && (\n                <>\n                  <select\n                    value={openAiCongig.selectedModel}\n                    onChange={(e) =>\n                      setOpenAiCongig({\n                        ...openAiCongig,\n                        selectedModel: e.target.value,\n                      })\n                    }\n                    className=\"dark:bg-dark bg-light dark:text-light text-dark rounded p-2\"\n                  >\n                    {openAiCongig.models.map((model) => (\n                      <option value={model.id}>{model.id}</option>\n                    ))}\n                  </select>\n                  <button\n                    onClick={resetApiKey}\n                    className=\"dark:bg-dark bg-light dark:text-light text-dark rounded p-2\"\n                  >\n                    Reset API Key\n                  </button>\n                </>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n//A 80% FullScreen center z-index: 50 modal form with\n//  - a title\n//  - a description\n//  - a form with a submit button\n//  - a cancel button\nconst DeployForm = ({\n  appName,\n  setAppNameVal,\n  subdomain,\n  setSubdomainVal,\n  deploy,\n  cancel,\n}) => {\n  return (\n    <div className=\"fixed top-0 left-0 w-full h-full dark:bg-dark bg-light bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"dark:bg-dark bg-light rounded-lg p-4\">\n        <h1 className=\"text-2xl font-semibold dark:text-light text-dark\">\n          Deploy\n        </h1>\n        <p className=\"dark:text-light text-dark\">\n          Deploy your app to a subdomain and create an app.\n        </p>\n        <form\n          onSubmit={() => {\n            deploy();\n            cancel(false);\n          }}\n        >\n          <input\n            className=\"dark:bg-dark bg-light dark:text-light text-dark rounded p-2\"\n            placeholder=\"App Name\"\n            onChange={setAppNameVal}\n            value={appName}\n          />\n          <button className=\"dark:bg-dark bg-light dark:text-light text-dark rounded p-2\">\n            Deploy\n          </button>\n        </form>\n        <button\n          className=\"dark:bg-dark bg-light dark:text-light text-dark rounded p-2\"\n          onClick={() => {\n            cancel(false);\n          }}\n        >\n          Cancel\n        </button>\n      </div>\n    </div>\n  );\n};\nconst SaveAsForm = ({ appName, setAppNameVal, saveAs, cancelSaveAs }) => {\n  return (\n    <div className=\"fixed top-0 left-0 w-full h-full dark:bg-dark bg-light bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"dark:bg-dark bg-light rounded-lg p-4\">\n        <h1 className=\"text-2xl font-semibold dark:text-light text-dark\">\n          Save as\n        </h1>\n        <p className=\"dark:text-light text-dark\">\n          Save your project in a puter folder\n        </p>\n        <form\n          onSubmit={(e) => {\n            saveAs(e);\n          }}\n        >\n          <input\n            className=\"dark:bg-dark bg-light dark:text-light text-dark rounded p-2\"\n            placeholder=\"App Name\"\n            onChange={setAppNameVal}\n            value={appName}\n          />\n          <button className=\"dark:bg-dark bg-light dark:text-light text-dark rounded p-2\">\n            Save as\n          </button>\n        </form>\n        <button\n          className=\"dark:bg-dark bg-light dark:text-light text-dark rounded p-2\"\n          onClick={() => {\n            cancelSaveAs(false);\n          }}\n        >\n          Cancel\n        </button>\n      </div>\n    </div>\n  );\n};\nconst LogSection = (name) => {\n  return (\n    <div className=\"w-full h-full bg-dark\">\n      <div className=\"dark:bg-dark bg-light w-full\">Console</div>\n      <pre\n        className=\"opacity-50 bottom-12 w-full h-full dark:bg-dark bg-light dark:text-light text-dark\"\n        id=\"logs\"\n        style={{ overflow: \"auto\" }}\n      ></pre>\n    </div>\n  );\n};\nfunction CustomIframe({\n  jsCode,\n  htmlCode,\n  consoleLog,\n  transpileJSX,\n  messageFinished,\n}) {\n  const cats=[\"https://i.giphy.com/7NoNw4pMNTvgc.webp\",\"https://c.tenor.com/y2JXkY1pXkwAAAAC/tenor.gif\"]\n  return (\n    <>\n      {messageFinished == 0 && (\n        <img\n          src=\"https://c.tenor.com/y2JXkY1pXkwAAAAC/tenor.gif\"\n          className=\"w-full h-full bg-dark\"\n        />\n      )}\n      {messageFinished == 1 && (\n        <iframe\n          className=\"w-full h-full dark:bg-dark bg-light dark:text-light text-dark border dark:border-light border-dark rounded shadow-lg\"\n          sandbox=\"allow-forms allow-modals allow-pointer-lock allow-popups allow-presentation allow-same-origin allow-scripts\"\n          srcDoc={\n            jsCode === \"\"\n              ? \"\"\n              : messageFinished\n              ? `<html>${htmlCode}<script src=\"https://js.puter.com/v2/\"></` +\n                `script><script type=\"module\">const puter = window.puter;\\n${transpileJSX(\n                  jsCode\n                )}<` +\n                `/script><div class=\"fixed bottom-0\"><pre class=\"fixed opacity-50 bottom-12 w-full dark:bg-dark bg-light dark:text-light text-dark\" id=\"logs2\"></pre></div><script>${consoleLog}</` +\n                `script></html>`\n              : \"\"\n          }\n        />\n      )}\n    </>\n  );\n}\nconst TheEditorJs = ({ handleEditorDidMount, jsCode, onChange, theme }) => {\n  return (\n    <Editor\n      height=\"90%\"\n      defaultLanguage={\"javascript\"}\n      defaultValue={jsCode}\n      theme={theme}\n      onMount={handleEditorDidMount}\n      onChange={onChange}\n      options={{\n        minimap: {\n          enabled: true,\n        },\n        cursorStyle: \"block\",\n      }}\n    />\n  );\n};\nconst TheEditorHtml = ({ handleEditorDidMount, htmlCode, onChange, theme }) => {\n  return (\n    <Editor\n      height=\"90%\"\n      defaultLanguage={\"html\"}\n      defaultValue={htmlCode}\n      theme={theme}\n      onMount={handleEditorDidMount}\n      onChange={onChange}\n      options={{\n        minimap: {\n          enabled: true,\n        },\n        cursorStyle: \"block\",\n      }}\n    />\n  );\n};\nconst TheEditorBabel = ({\n  handleEditorDidMount,\n  babelCode,\n  onChange,\n  theme,\n}) => {\n  return (\n    <Editor\n      height=\"90%\"\n      defaultLanguage={\"javascript\"}\n      defaultValue={babelCode}\n      theme={theme}\n      onMount={handleEditorDidMount}\n      onChange={onChange}\n      options={{\n        minimap: {\n          enabled: true,\n        },\n        cursorStyle: \"block\",\n      }}\n    />\n  );\n};\nconst CodeEditor = ({\n  handleChange,\n  selectedCode,\n  appName,\n  setAppNameVal,\n  downloadCode,\n  jsCode,\n  htmlCode,\n  handleEditorDidMountHtml,\n  handleEditorDidMountJs,\n  updateCodeValueJs,\n  updateCodeValueHtml,\n  updateCodeValueBabel,\n  babelCode,\n  handleEditorDidMountBabel,\n  name,\n}) => {\n  const [theme, setTheme] = useState(\"vs-dark\");\n  const handleThemeChange = (event) => {\n    setTheme(event.target.value);\n  };\n  const [themeOs, setThemeOs] = useState(\n    window.matchMedia &&\n      window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n      ? \"dark\"\n      : \"light\"\n  );\n  useEffect(() => {\n    const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    const handleChange = () => {\n      if (mediaQuery.matches) {\n        setTheme(\"vs-dark\");\n      } else {\n        setTheme(\"vs\");\n      }\n    };\n    mediaQuery.addListener(handleChange);\n    return () => mediaQuery.removeListener(handleChange);\n  }, []);\n  return (\n    <>\n      <div className=\"flex justify-between items-center p-4 dark:bg-dark bg-light \">\n        <select\n          onChange={handleChange}\n          value={selectedCode}\n          className=\"mx-4 py-2 px-3 bg-gray-700 dark:text-light text-dark rounded outline-none\"\n        >\n          <option value=\"js\">JavaScript</option>\n          <option value=\"html\">HTML</option>\n          <option value=\"babel\">Babel</option>\n        </select>\n        {selectedCode === \"babel\" && (\n          <span>\n            This is the Result javascript from the compilation. Modification are\n            not effectives\n          </span>\n        )}\n        <select\n          onChange={handleThemeChange}\n          value={theme}\n          className=\"mx-4 py-2 px-3 bg-gray-700 dark:text-light text-dark rounded outline-none\"\n        >\n          <option value=\"vs-dark\">vs-dark</option>\n          <option value=\"vs\">vs</option>\n          <option value=\"hc-black\">hi-contrast</option>\n        </select>\n      </div>\n      {selectedCode === \"js\" ? (\n        <TheEditorJs\n          handleEditorDidMount={handleEditorDidMountJs}\n          jsCode={jsCode}\n          onChange={updateCodeValueJs}\n          theme={theme}\n        />\n      ) : selectedCode === \"html\" ? (\n        <TheEditorHtml\n          handleEditorDidMount={handleEditorDidMountHtml}\n          htmlCode={htmlCode}\n          onChange={updateCodeValueHtml}\n          theme={theme}\n        />\n      ) : (\n        <TheEditorBabel\n          handleEditorDidMount={handleEditorDidMountBabel}\n          htmlCode={babelCode}\n          onChange={updateCodeValueBabel}\n          theme={theme}\n        />\n      )}\n    </>\n  );\n};\nconst ChatView = ({\n  inputSubmit,\n  inputMessage,\n  setInputVal,\n  messageFinished,\n  fullMessage,\n  chatMessages,\n  resetChatMessages,\n}) => {\n  return (\n    <div className=\"w-full h-full dark:bg-dark bg-light dark:text-light text-dark\">\n      <div className=\"w-full h-full\">\n        <div className=\"w-full h-full dark:bg-dark bg-light dark:text-light text-dark\">\n          <div className=\"w-full h-5/6 dark:bg-dark bg-light dark:text-light text-dark overflow-y-scroll\">\n            {chatMessages.map((message, index) => {\n              if (message.role !== \"system\") {\n                return (\n                  <div key={index} className={`w-full overflow-y-scroll p-4`}>\n                    <MarkDownView\n                      content={\n                        message.role == \"user\"\n                          ? \"# \" + message.content\n                          : message.content\n                      }\n                      className={` p-4 m-4 w-5/6 mx-2 px-2  opacity-100 overflow-y-scroll rounded  dark:text-light text-dark  ${\n                        message.role === \"assistant\"\n                          ? \"dark:bg-red-800 bg-red-400\"\n                          : \"dark:bg-blue-800 bg-blue-800\"\n                      }`}\n                    />\n                  </div>\n                );\n              }\n            })}\n          </div>\n        </div>\n      </div>\n      <div className=\"mt-2 dark:bg-dark bg-light absolute bottom-0 w-full flex\">\n        <textarea\n          type=\"text\"\n          rows={Math.max(inputMessage.split(\"\\n\").length, 2)}\n          placeholder={`Make a weather app for Ales, France\n          Make a btc graph , What are the news?\n          `}\n          className=\"bg-light text-dark ml-2 mb-2 h-3/4 w-full m-auto border dark:border-light border-dark rounded p-2 w-5/6\"\n          onKeyPress={(event) => {\n            if (event.key === \"Enter\" && !event.shiftKey) {\n              event.preventDefault();\n              inputSubmit(event);\n            }\n          }}\n          value={inputMessage}\n          onChange={setInputVal}\n        />\n        <button\n          onClick={resetChatMessages}\n          className=\"bottom-0 dark:bg-dark bg-light border dark:border-light border-dark hover:bg-gray-900 dark:text-light text-dark rounded mx-2 w-1/4\"\n        >\n          Clear Chat\n        </button>\n      </div>\n    </div>\n  );\n};\nconst NavBar = ({\n  inputSubmit,\n  setGptValue,\n  gptVal,\n  resetApiKey,\n  visibleApiKey,\n  username,\n  inputMessage,\n  setInputVal,\n  chatProvider,\n  setChatProvider,\n  ollamaConfig,\n  sendMenuAction,\n}) => {\n  const [openMenu, setOpenMenu] = useState(\"\");\n  const toggleMenu = (menu) => {\n    setOpenMenu(openMenu === menu ? \"\" : menu);\n  };\n  const menuConfig = [\n    {\n      name: \"File\",\n      subMenu: [\n        { status: \"active\", name: \"New\", action: \"new\" },\n        { status: \"inactive\", name: \"Open\", action: \"open\" },\n        { status: \"inactive\", name: \"Import\", action: \"import\" },\n        { status: \"inactive\", name: \"Save\", action: \"save\" },\n        { status: \"active\", name: \"Save As\", action: \"saveAs\" },\n        { status: \"active\", name: \"Deploy\", action: \"deploy\" },\n      ],\n    },\n    {\n      name: \"Edit\",\n      subMenu: [\n        { status: \"inactive\", name: \"Undo\", action: \"undo\" },\n        { status: \"inactive\", name: \"Copy\", action: \"copy\" },\n        { status: \"inactive\", name: \"Cut\", action: \"cut\" },\n        { status: \"inactive\", name: \"Paste\", action: \"paste\" },\n      ],\n    },\n    {\n      name: \"View\",\n      subMenu: [\n        { status: \"inactive\", name: \"Fullscreen\", action: \"fullscreen\" },\n        { status: \"inactive\", name: \"Dark Mode\", action: \"darkMode\" },\n      ],\n    },\n    {\n      name: \"Help\",\n      subMenu: [\n        { status: \"inactive\", name: \"About Us\", action: \"aboutUs\" },\n        { status: \"active\", name: \"User Guide\", action: \"userGuide\" },\n      ],\n    },\n  ];\n  return (\n    <nav className=\"absolute w-full top-0 left-0 dark:bg-dark bg-light dark:text-light text-dark top-0 px-0 h-5 flex   z-50\">\n      <div className=\" w-full top-0 dark:bg-dark bg-light dark:text-light text-dark  px-0 flex justify-between\">\n        <div className=\"w-3/4 top-0 dark:bg-dark bg-light dark:text-light text-dark py-2 px-0\">\n          <span className=\"left-0 py-4 px-2\">\n            <span>\n              <b>Code With Ai</b>\n            </span>\n            <span className=\"absolute left-0 top-6 text-sm px-2\">\n              By SamLePirate\n            </span>\n          </span>\n          {menuConfig.map((menu, index) => (\n            <div className=\"relative inline-block\">\n              <span\n                tabIndex={index} // Makes the div focusable\n                // Handles focus event\n                onBlur={() => {\n                  setTimeout(() => toggleMenu(menu.name), 100);\n                }}\n                className={`${\n                  openMenu == menu.name ? \"bg-gray-700\" : \"\"\n                } cursor-pointer pt-3 pb-2 px-2 active:bg-gray-700  hover:bg-gray-700 hover:shadow-lg rounded-lg`}\n                onClick={() => toggleMenu(menu.name)}\n              >\n                {menu.name}\n              </span>\n              {openMenu === menu.name && (\n                <div className=\"absolute left-0 mt-2 w-48 dark:bg-dark bg-light rounded-md animate-appear border border-gray-700 shadow-lg z-50 \">\n                  {menu.subMenu.map((subMenu) => (\n                    <button\n                      className={`w-full text-left block px-4 py-2 border border-gray-700 text-sm text-gray-300 active:bg-gray-400 active:border-gray-700 active:text-dark transition-colors duration-100 ease-in-out hover:bg-gray-700 ${\n                        subMenu.status == \"inactive\" ? \"text-gray-600\" : \"\"\n                      }`}\n                      onClick={() => {\n                        setOpenMenu(\"\");\n                        sendMenuAction(subMenu.action);\n                      }}\n                    >\n                      {subMenu.name}\n                    </button>\n                  ))}\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n        <div className=\"justify-end py-2 px-0\">\n          <span className=\"cursor-pointer cursor-pointer pt-3 pb-2 px-2  hover:bg-gray-700 hover:shadow-lg rounded-lg\">\n            {visibleApiKey}\n            {username}\n          </span>\n        </div>\n      </div>\n    </nav>\n  );\n};\nconst DraggableUI = ({\n  id,\n  onDragStart,\n  onDragEnd,\n  onDragOver,\n  onDrop,\n  getDivContent,\n  draggingId,\n  divs,\n}) => {\n  return (\n    <div\n      key={id}\n      className={`w-full h-full dark:bg-dark bg-light dark:text-light text-dark border dark:border-light border-dark flex flex-col rounded shadow-lg  ${\n        draggingId === id ? \"opacity-30\" : \"opacity-100\"\n      }`}\n    >\n      <span className=\"flex justify-center border dark:border-light border-dark\">\n        <button\n          draggable\n          onDragStart={(e) => onDragStart(e, id)}\n          onDragEnd={onDragEnd}\n          onDragOver={onDragOver}\n          onDrop={(e) => onDrop(e, id)}\n          className={`absolute left-0 top-0  border dark:border-light border-dark rounded-lg w-8 shadow-lg hover:bg-gray-400  ${\n            draggingId === id ? \"opacity-10\" : \"opacity-100\"\n          } ${\n            draggingId !== id && draggingId\n              ? \"bg-red-700\"\n              : \"dark:bg-dark bg-light\"\n          }`}\n          style={{ cursor: \"grab\" }}\n        >\n          👋\n        </button>\n        <span className=\"\">\n          <span className=\"w-full flex justify-center\">\n            {divs.find((div) => div.id === id).content.props.name}\n          </span>\n        </span>\n      </span>\n      {getDivContent(id)}\n    </div>\n  );\n};\nconst DraggableApp = () => {\n  async function sendMessage(message) {\n    setMessageFinished(false);\n    setFullMessage(\"\");\n    try {\n      if (chatProvider === \"puter\") {\n        const newMessage = [\n          ...chatMessages,\n          { role: \"user\", content: message },\n        ];\n        newMessage[0].content = systemPrompt;\n        console.log(newMessage);\n        console.log(\"chat with puter\");\n        puter.ai.chat(newMessage).then((response) => {\n          console.log(response.toString());\n          setFullMessage(response.toString());\n          setChatMessages([\n            ...newMessage,\n            { role: \"assistant\", content: response.toString() },\n          ]);\n          setMessageFinished(true);\n        });\n        return;\n      }\n      if (chatProvider === \"ollama\" && ollamaConfig.models.length > 0) {\n        const newMessage = [\n          ...chatMessages,\n          {\n            role: \"user\",\n            content:\n              message +\n              \"\\nProvide only html and jsx snippet in Markdown.\\n No explaination needed. Give me the 2 code snipet in markdown.\",\n          },\n        ];\n        newMessage[0].content = systemPrompt;\n        console.log(newMessage);\n        const ollama = new OpenAI({\n          baseURL: ollamaConfig.baseURL,\n          // required but ignored\n          apiKey: \"ollama\",\n          dangerouslyAllowBrowser: true,\n        });\n        newMessage.push({ role: \"assistant\", content: \"...\" });\n        setChatMessages(newMessage);\n        const stream = await ollama.chat.completions.create({\n          messages: newMessage,\n          model: ollamaConfig.selectedModel,\n          stream: true,\n          max_tokens: 4000,\n        });\n        let fullResponse = \"\";\n        let snippetTagCount = 0;\n        for await (const chunk of stream) {\n          const theChunk = chunk.choices[0]?.delta?.content;\n          if (theChunk != undefined) {\n            //console.log(theChunk);\n            fullResponse = fullResponse + theChunk;\n            setFullMessage(fullResponse);\n            // snippetTagCount += (fullResponse.match(/\\`\\`\\`/g) || []).length;\n            // if (snippetTagCount%2==1 && snippetTagCount>0) {\n            //   newMessage[newMessage.length-1].content=fullResponse+\"\\`\\`\\`\";\n            // }\n            // else{\n            //   newMessage[newMessage.length-1].content=fullResponse;\n            // }\n            // setChatMessages(newMessage);\n          }\n        }\n        console.log(\"Message Finished\");\n        console.log(fullResponse);\n        newMessage.push({ role: \"assistant\", content: fullResponse });\n        setChatMessages(newMessage);\n        setMessageFinished(true);\n        return;\n      }\n      if (chatProvider === \"anthropic\") {\n        const newMessage = [\n          ...chatMessages,\n          {\n            role: \"user\",\n            content:\n              message +\n              \"\\nProvide only html and jsx snippet in Markdown.\\n No explaination needed. Give me the 2 code snipet in markdown.\",\n          },\n        ];\n        newMessage[0].content = systemPrompt;\n        console.log(newMessage);\n        newMessage.push({ role: \"assistant\", content: \"...\" });\n        setChatMessages(newMessage);\n        const response = await fetch(\"http://localhost:3002/stream\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ message: message, systeme: systemPrompt }),\n        });\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder(\"utf-8\");\n        let fullResponse = \"\";\n        reader.read().then(function processText({ done, value }) {\n          if (done) {\n            console.log(\"Stream complete\");\n            setFullMessage(fullResponse);\n            setMessageFinished(true);\n            newMessage.push({ role: \"assistant\", content: fullResponse });\n            setChatMessages(newMessage);\n            return;\n          }\n          const chunk = decoder.decode(value);\n          fullResponse = fullResponse + chunk;\n          setFullMessage(fullResponse);\n          setFullMessage((prev) => prev + chunk);\n          reader.read().then(processText);\n        });\n      }\n      if (chatProvider === \"openai\" && apiKey !== \"\") {\n        const newMessage = [\n          ...chatMessages,\n          { role: \"user\", content: message },\n        ];\n        newMessage[0].content = systemPrompt;\n        console.log(newMessage);\n        const openai = new OpenAI({\n          apiKey: apiKey,\n          dangerouslyAllowBrowser: true, // This is the default and can be omitted\n        });\n        newMessage.push({ role: \"assistant\", content: \"...\" });\n        setChatMessages(newMessage);\n        const stream = await openai.chat.completions.create({\n          model: openAiCongig.selectedModel,\n          messages: newMessage,\n          stream: true,\n        });\n        let fullResponse = \"\";\n        let snippetTagCount = 0;\n        for await (const chunk of stream) {\n          const theChunk = chunk.choices[0]?.delta?.content;\n          if (theChunk != undefined) {\n            //console.log(theChunk);\n            fullResponse = fullResponse + theChunk;\n            //count the number of snippet tag\n            // snippetTagCount += (fullResponse.match(/\\`\\`\\`/g) || []).length;\n            // if (snippetTagCount%2==1 && snippetTagCount>0) {\n            //   setFullMessage((prev) => prev + theChunk+\"\\`\\`\\`\");\n            // }\n            setFullMessage((prev) => prev + theChunk);\n            snippetTagCount += (fullResponse.match(/\\`\\`\\`/g) || []).length;\n            if (snippetTagCount % 2 == 1 && snippetTagCount > 0) {\n              newMessage[newMessage.length - 1].content = fullResponse + \"\";\n            } else {\n              newMessage[newMessage.length - 1].content = fullResponse;\n            }\n            setChatMessages(newMessage);\n          }\n        }\n        console.log(\"Message Finished\");\n        console.log(fullResponse);\n        newMessage[newMessage.length - 1].content = fullResponse;\n        setChatMessages(newMessage);\n        setMessageFinished(true);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n  const extractCodeSnippets = (markdownContent) => {\n    const codeSnippets = [];\n    const codeString = \"\\`\\`\\`\";\n    const codeBlockRegex = new RegExp(\n      `${codeString}(jsx|tsx|js|html)\\n([\\\\s\\\\S]*?)${codeString}\\n`,\n      \"g\"\n    );\n    let match;\n    const completed = [];\n    while ((match = codeBlockRegex.exec(markdownContent))) {\n      const [fullMatch, language, code] = match;\n      const status =\n        fullMatch.length === match[0].length ? \"completed\" : \"partial2\";\n      completed.push(language);\n      codeSnippets.push({\n        language,\n        code,\n        status,\n      });\n    }\n    // Check for a partial code snippet at the end of the file\n    const partialCodeRegex = new RegExp(\n      `${codeString}(jsx)\\n([\\\\s\\\\S]*)(?!${codeString})`\n    );\n    const partialMatch = partialCodeRegex.exec(markdownContent);\n    if (partialMatch) {\n      const [, language, code] = partialMatch;\n      if (completed.indexOf(language) == -1) {\n        codeSnippets.push({\n          language,\n          code,\n          status: \"partial\",\n        });\n      }\n    }\n    return codeSnippets;\n  };\n  function transformImports(code) {\n    const regex =\n      /import\\s+((\\*\\s+as\\s+\\w+)|(\\{\\s[^}]+\\s\\})|(\\w+))\\s+from\\s+\"([^\"]+)\";/g;\n    code = code.replace('from \"react\"', 'from \"https://esm.sh/react\"');\n    return code.replace(regex, (match, p1, p2, p3, p4, p5) => {\n      if (!p5.startsWith(\"https\")) {\n        return `import ${p1} from \"https://esm.sh/${p5.replace(/@/g, \"\")}\";`;\n      }\n      return match;\n    });\n  }\n  function transformImports2(code) {\n    const regex =\n      /import\\s+((\\*\\s+as\\s+\\w+)|(\\{\\s[^}]+\\s\\})|(\\w+))\\s+from\\s+'([^']+)';/g;\n    code = code.replace('from \"react\"', 'from \"https://esm.sh/react\"');\n    return code.replace(regex, (match, p1, p2, p3, p4, p5) => {\n      if (!p5.startsWith(\"https\")) {\n        return `import ${p1} from \"https://esm.sh/${p5.replace(/@/g, \"\")}\";`;\n      }\n      return match;\n    });\n  }\n  function transpileJSX(jsxCode) {\n    jsxCode = transformImports(jsxCode);\n    jsxCode = transformImports2(jsxCode);\n    jsxCode = jsxCode.replace(/\\`\\`\\`/g, \"\");\n    try {\n      const result = transform(jsxCode, {\n        transforms: [\"typescript\", \"jsx\"],\n        jsxPragma: \"React.createElement\",\n        jsxFragmentPragma: \"React.Fragment\",\n      });\n      //console.log(result);\n      jsxCode = result.code;\n      const newCode = Babel.transform(jsxCode, {\n        presets: [\"react\"],\n      }).code;\n      setBabelCode(newCode);\n      editorBabelRef.current?.setValue(newCode);\n      return newCode;\n    } catch (error) {\n      //console.error('Erreur de syntaxe dans le code JavaScript :', error);\n      // Vous pouvez également afficher un message d'erreur à l'utilisateur ici\n      setBabelCode(`Error In JSX ${error}`);\n      editorBabelRef.current?.setValue(`Error In JSX ${error}`);\n      return jsxCode;\n    }\n  }\n  function updateCodeValueJs(value, event) {\n    setJsCode(value);\n  }\n  function updateCodeValueHtml(value, event) {\n    setHtmlCode(value);\n  }\n  function updateCodeValueBabel(value, event) {\n    setBabelCode(value);\n  }\n  function handleEditorDidMountJs(editor, monaco) {\n    //console.log(\"mount\");\n    editorJsRef.current = editor;\n    editorJsRef.current?.setValue(jsCode);\n  }\n  function handleEditorDidMountHtml(editor, monaco) {\n    //console.log(\"mount\");\n    editorHtmlRef.current = editor;\n    editorHtmlRef.current?.setValue(htmlCode);\n  }\n  const [babelCode, setBabelCode] = useState(\"\");\n  function handleEditorDidMountBabel(editor, monaco) {\n    //console.log(\"mount\");\n    editorBabelRef.current = editor;\n    editorBabelRef.current?.setValue(babelCode);\n  }\n  function handleChange(event) {\n    setSelectedCode(event.target.value);\n    //editorJsRef.current?.setValue(jsCode);\n    //editorHtmlRef.current?.setValue(htmlCode);\n  }\n  const saveFullCode = (htmlCode, jsCode) => {\n    let fullCode =\n      `<!DOCTYPE html>\n  <html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CodepAIn</title>\n    \n  </head>\n  \n    ${htmlCode}\n    <script src=\"https://js.puter.com/v2/\"></` +\n      `script>\n    <script type=\"module\">\n    const puter = window.puter;\\n\n      ${transpileJSX(jsCode)}\n    </` +\n      `script>\n  \n  </html>`;\n    //console.log(fullCode);\n    return fullCode;\n  };\n  const makeAppFile = () => {\n    let code = \"\";\n    if (appName == \"\") {\n      alert(\"No App Name\");\n      return;\n    }\n    code = saveFullCode(htmlCode, jsCode);\n    return code;\n  };\n  const downloadCode = () => {\n    let code = \"\";\n    if (appName == \"\") {\n      alert(\"No App Name\");\n      return;\n    }\n    code = saveFullCode(htmlCode, jsCode);\n    (async () => {\n      const visibleAppName = appName.replace(/ /g, \"_\");\n      // (1) Create a number of key-value pairs\n      let dirName = puter.randName();\n      await puter.fs.mkdir(dirName);\n      // (2) Create 'index.html' in the directory with the contents \"Hello, world!\"\n      await puter.fs.write(`${dirName}/index.html`, code);\n      // (3) Host the directory under a random subdomain\n      let subdomain = puter.randName();\n      const site = await puter.hosting.create(subdomain, dirName);\n      console.log(\n        `Website hosted at: <a href=\"https://${site.subdomain}.puter.site\" target=\"_blank\">https://${site.subdomain}.puter.site</a>`\n      );\n      const appList = await puter.apps.list();\n      //document.write(`<pre>${JSON.stringify(appList).split(\",\").join(\"\\n\")}</pre>`);\n      try {\n        const appData = {\n          name: visibleAppName,\n          indexURL: `https://${site.subdomain}.puter.site`,\n          title: appName,\n          description: \"This is an example app.\",\n          maximizeOnStart: true,\n        };\n        const response = await puter.apps.create(appData);\n        console.log(\n          \"App created:\",\n          JSON.stringify(response).split(\",\").join(\"\\n\")\n        );\n        alert(\"App created : Success\");\n      } catch (error) {\n        alert(\"App created : Error\");\n        console.log(\n          \"Failed to create app:\",\n          JSON.stringify(error).split(\",\").join(\"\\n\")\n        );\n      }\n    })();\n    return;\n    console.log(code);\n    console.log(document);\n    const element = document.createElement(\"a\");\n    const file = new Blob([code], {\n      type: \"text/html\",\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = \"index.html\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    try {\n      element.click();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const setGptValue = (e) => {\n    setGptVal(!gptVal);\n    console.log(e.target.value);\n  };\n  const resetApiKey = (e) => {\n    puter.kv.del(\"openai_api_key\").then((success) => {\n      console.log(\"deleted\");\n      setApiKey(\"\");\n    });\n  };\n  const inputSubmit = (e) => {\n    //e.preventDefaults();\n    setInputMessage(\"\");\n    sendMessage(inputMessage);\n    console.log(inputMessage);\n  };\n  const setInputVal = (e) => {\n    setInputMessage(e.target.value);\n  };\n  const setApiKeyVal = (e) => {\n    puter.kv.set(\"openai_api_key\", e.target.value).then((success) => {\n      console.log(\"api Key updated\");\n    });\n    setApiKey(e.target.value);\n  };\n  const setAppNameVal = (e) => {\n    setAppName(e.target.value);\n  };\n  const onDragStart = (e, id) => {\n    e.dataTransfer.setData(\"id\", id);\n    setDraggingId(id);\n  };\n  const onDragEnd = () => {\n    setDraggingId(null);\n  };\n  const onDragOver = (e) => {\n    e.preventDefault();\n  };\n  const onDrop = (e, targetId) => {\n    const draggedId = parseInt(e.dataTransfer.getData(\"id\"));\n    const newDivs = divs\n      .map((div) => {\n        if (div.id === draggedId) return { ...div, id: targetId };\n        if (div.id === targetId) return { ...div, id: draggedId };\n        return div;\n      })\n      .sort((a, b) => a.id - b.id);\n    setDivs(newDivs);\n    setDraggingId(null);\n  };\n  const getDivContent = (id) => {\n    const div = divs.find((div) => div.id === id);\n    return div.content;\n  };\n  const sendMenuAction = (action) => {\n    console.log(action);\n    if (action === \"deploy\") {\n      setShowDeployForm(true);\n    }\n    if (action === \"new\") {\n      setJsCode(\"\");\n      setHtmlCode(\"\");\n      editorHtmlRef.current?.setValue(\"\");\n      editorJsRef.current?.setValue(\"\");\n    }\n    if (action === \"saveAs\") {\n      setShowSaveAsForm(true);\n    }\n    if (action === \"userGuide\") {\n      setShowGuideView(true);\n    }\n  };\n  const saveAs = (e) => {\n    e.preventDefault();\n    setShowSaveAsForm(false);\n    if (appName == \"\") {\n      alert(\"No App Name\");\n      return;\n    }\n    const appFile = makeAppFile();\n    let dirName = appName;\n    puter.fs\n      .mkdir(dirName, { dedupeName: true })\n      .then((directory) => {\n        console.log(`\"${dirName}\" created at ${directory.path}`);\n        console.log(dirName);\n        console.log(directory.path);\n        puter.fs\n          .write(`${dirName}/app.js`, jsCode)\n          .then(() => {\n            console.log(\"app.jsx written successfully\");\n            puter.fs\n              .write(`${dirName}/app.html`, htmlCode)\n              .then(() => {\n                console.log(\"app.html written successfully\");\n                puter.fs\n                  .write(`${dirName}/index.html`, appFile)\n                  .then(() => {\n                    console.log(\"index.html written successfully\");\n                    alert(\"App succesfully saved on \" + directory.path);\n                    puter.fs\n                      .readdir(\"./\")\n                      .then((items) => {\n                        // print the path of each item in the directory\n                        console.log(items.map((item) => item.name));\n                      })\n                      .catch((error) => {\n                        puter.print(`Error reading directory: ${error}`);\n                      });\n                  })\n                  .catch((error) => {\n                    console.log(\"Error writing file:\", error);\n                  });\n              })\n              .catch((error) => {\n                console.log(\"Error writing file:\", error);\n              });\n          })\n          .catch((error) => {\n            console.log(\"Error writing file:\", error);\n          });\n      })\n      .catch((error) => {\n        console.log(\"Error creating directory:\", error);\n      });\n  };\n  const resetChatMessages = () => {\n    setChatMessages([{ role: \"system\", content: systemPrompt }]);\n  };\n  const [username, setUsername] = useState(\"Guest\");\n  const todayString = new Date().toDateString();\n  const timeToHumanStringInFrance = (time) => {\n    const date = new Date(time);\n    return date.toLocaleString(\"fr-FR\");\n  };\n  const [draggingId, setDraggingId] = useState(null);\n  const [appName, setAppName] = useState(\"\");\n  const [gptVal, setGptVal] = useState(0);\n  const ContextInfos = `\n  Today is ${todayString}.\n  The time is ${timeToHumanStringInFrance(Date.now())} in France.\n  The user is ${username}.\n  `;\n  const systemPrompt = `You are a pro developer in javascript html and react and tailwind.\n    You can create really complex app with these languages.\n    You have no limitation in the number of lines of code.\n    If requested a full app, you will do it.\n    You allways respond to user in one run.\n    You can at the begining of a response explain the functionallity that you are going to implement, only if needed to plan the app. Do it in // comments.\n    You only create HTML and tsx/jsx. \n    The HTML will be is inside <BODY> tag.\n    You write in md format. you only write good code.\n    You will create each snippet separately for each language. \n    You only provide code snippets. no explaination, no title, no comment. \n    You use Tailwind and react.js\n    Allways separate the html  and tsx or jsx in separate code snippets.\n    add theses imports to your tsx/jsx script :\n    import React from \"https://esm.sh/react\";\n    import ReactDOM from \"https://esm.sh/react-dom\";\n    \n    if you want to import a package, you can use a cdn like https://esm.sh/ \n    always import tailwind like this :\n    import { setup as twindSetup } from 'https://cdn.skypack.dev/twind/shim'\n    //and instanciate it\n    twindSetup();\n    for graph and charts use highstock and highchart\n    import Highcharts from \"https://esm.sh/highcharts\";\n    import HighchartsReact from \"https://esm.sh/highcharts-react-official\";\n    or\n    import Highcharts from \"https://esm.sh/highcharts/highstock\";\n    \n    never import css\n    \n    for 3d, use THREE.js\n    \n    When the user ask for an app, imply every functionalities to make the best of it.\n    \n    Make full working apps, with every functionalities. \n    Add a header with the title of the app and a footer.\n    Add a menu if needed.\n    allways make the app take 100% of available space, with dark background. \n    Use card and beautiful tailwind style to present the result.\n    Allways use try catch to handle errors.\n    If you need to use an api, make sure it does not require an api key.\n    for weather use wttr.in or an other free api that does not require an api key.\n    https://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&current_weather=true  => \"current_weather\"\n    https://api.coingecko.com/api \n    https://api.multiversx.com/economics?extract=price for EGLD  => \"price\"\n    https://www.francetvinfo.fr/titres.rss =>   entries \"title\" and \"summary\" and \"links[0] as href \" and \"links[1] as image \" For the News with feedparser library\n    \n    when you create an image, Always make the prompt a full detailled prompt, with details about the content of the image and the style of the image.\n    \n    always start the js by a comment with the title of the app:\n    //appTitle: The title of the app\n    \n    always start the js snippet by a comment with the title of the app:\n    //appTitle: The title of the app\n    \n    your html must be like:\n    \\`\\`\\`html\n    <div id=\"app\"></div>\n    \\`\\`\\`\n    \n    always include tailwind and use a lot of tailwind classes to style your app to the best with rounded corners and shadow and simple animations.\n    \n    you have a const avaliable for you to use:\n    const puter;\n    \n    dont import puter, it is already imported for you.\n    never import puter, it is already imported for you.\n    \n    Before using puter,always make sure the user is connected and show the username in the menu:\n    \\`\\`\\`\n    const isSignedIn=puter.auth.isSignedIn();\n    if (!isSignedIn){\n        puter.auth.signIn();\n    }\n    puter.auth.getUser().then(function(user) {\n        const username=user.username;\n        console.log(username);\n    });\n    \\`\\`\\`\n    \n    you can use it like that:\n    \n    \\`\\`\\`\n    puter.kv.set('name', 'Puter Smith').then((success) => {\n      console.log(\\`Key-value pair created/updated: Success\\`);\n    });\n    \n    //or \n    const name = await puter.kv.get('name');\n    \n    //or\n    puter.kv.del('name').then((success) => {\n      console.log(\\`Key-value pair deleted: Success\\`);\n    });\n    \n    //or \n    \n    puter.kv.list().then((keys) => {\n      console.log(\\`Keys are: \\${keys}\\<br><br>\\`);\n    });\n    //or\n    puter.kv.list(true).then((key_vals) => {\n      console.log(\\`Keys and values are: \\${(key_vals).map((key_val) => key_val.key + ' => ' + key_val.value)}\\<br><br>\\`);\n    });\n    \n    Based on the request, you do jsx or tsx\n    \n    \\`\\`\\`\n    allways imports React and ReactDOM\n    always finish the app this way : \n    \\`\\`\\`\n    ReactDOM.render(<TheAppYouMade />, document.getElementById(\"the_id_of_the_div\"));\n    \\`\\`\\`\n    \n    \n    ${ContextInfos}\n    `;\n  const [fullMessage, setFullMessage] = useState(\"\");\n  const [chatMessages, setChatMessages] = useState([{ role: \"system\", content: systemPrompt }]);\n  const [messageFinished, setMessageFinished] = useState(true);\n  const availableChatProviders = [\"openai\", \"ollama\", \"puter\"];\n  const [chatProvider, setChatProvider] = useState(\"puter\");\n  const [ollamaConfig, setOllamaConfig] = useState({\n    baseURL: \"http://localhost:4000\",\n    models: [],\n    selectedModel: \"\",\n  });\n  const [openAiCongig, setOpenAiCongig] = useState({\n    models: [],\n    selectedModel: \"gpt-4-turbo-preview\",\n  });\n  const [inputMessage, setInputMessage] = useState(\"\");\n  const [apiKey, setApiKey] = useState(\"\");\n  const visibleApiKey = apiKey.slice(0, 3);\n  const editorJsRef = useRef(null);\n  const editorHtmlRef = useRef(null);\n  const editorBabelRef = useRef(null);\n  const [htmlCode, setHtmlCode] = useState(`<div id=\"app\"></div>`);\n  const [jsCode, setJsCode] =\n    useState(`//appTitle: Cool Clock with Navbar and KV Fields View and an Iframe\n    import React, { useEffect, useState } from \"https://esm.sh/react\";\n    import ReactDOM from \"https://esm.sh/react-dom\";\n    import { setup as twindSetup } from 'https://cdn.skypack.dev/twind/shim';\n    //and instanciate it\n    twindSetup();\n    \n    const ClockApp = () => {\n        if (puter==undefined){\n            this.puter=window.puter;\n        }\n        const [time, setTime] = useState(new Date());\n        const [username, setUsername] = useState('');\n        const [kvFields, setKvFields] = useState([]);\n    \n        useEffect(() => {\n            const timerID = setInterval(() => tick(), 1000);\n            return () => clearInterval(timerID);\n        });\n    \n        \n    \n        useEffect(() => {\n            const checkUserAndFetchKV = async () => {\n                const isSignedIn = puter.auth.isSignedIn();\n                if (!isSignedIn) {\n                    puter.auth.signIn();\n                }\n                const user = await puter.auth.getUser();\n                setUsername(user.username);\n    \n                puter.kv.set('name', user.username).then((success) => {\n                    console.log(\"name updated\");\n                });\n    \n                puter.kv.set('time', Date()).then((success) => {\n                    console.log(\"time updated\");\n                });\n    \n                const kvList = await puter.kv.list(true);\n                setKvFields(kvList);\n            };\n            checkUserAndFetchKV();\n        }, []);\n    \n        const tick = () => {\n            setTime(new Date());\n        };\n    \n        return (\n            <div className=\"flex flex-col h-screen bg-gray-900 text-white\">\n                <nav className=\"flex items-center justify-between p-4 bg-gray-800\">\n                    <h1 className=\"text-xl font-bold\">Cool Clock</h1>\n                    <span>{username}</span>\n                </nav>\n                <div className=\"flex-1 flex flex-col items-center justify-start p-4 space-y-4 overflow-auto\">\n                    <div className=\"text-center\">\n                        <div className=\"text-4xl font-mono\">{time.toLocaleTimeString()}</div>\n                    </div>\n                    <div className=\"max-w-xl w-full\">\n                        <h2 className=\"text-lg font-semibold mb-2\">KV Fields:</h2>\n                        <ul className=\"bg-gray-800 p-3 rounded-lg\">\n                            {kvFields.map((field, index) => (\n                                <li key={index} className=\"flex justify-between text-sm p-2 hover:bg-gray-700 rounded\">\n                                    <span className=\"font-mono\">{field.key}</span>\n                                    <span>{field.value}</span>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                    <div className=\"w-full h-full\">\n                        <iframe\n                            className=\"w-full h-full\"\n                            src=\"https://wikipedia.org\"\n                            sandbox=\"allow-forms allow-modals allow-pointer-lock allow-popups allow-presentation allow-same-origin allow-scripts allow-downloads\"\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    };\n    \n    ReactDOM.render(<ClockApp />, document.getElementById('app'));\n    `);\n  const [selectedCode, setSelectedCode] = useState(\"js\");\n  const consoleLog = `var oldLog = console.log;var oldError = console.error;\n  var logElement =parent.document.getElementById('logs');\n  console.log = function (message) {\n    \n      if (typeof message == 'object') {\n          logElement.innerHTML += JSON.stringify(message).split(\",\").join(\",\\\\n\") + '<br />';\n      } else {\n        var stack = new Error().stack;\n        stack=\"\"\n          logElement.innerHTML += message+ '<br />';\n      }\n      oldLog.apply(console, arguments);\n      logElement.scrollTop = logElement.scrollHeight;\n      \n  };\n  console.error = function (message) {\n   \n      var stack = new Error().stack;\n        logElement.innerHTML +=  '<span style=\"color:red\">'+message+\"\\\\n\"+ stack.split(\"\\\\n\").slice(2).join(\"\\\\n\")+'</span> ' + '<br />';\n    \n    oldError.apply(console, arguments);\n    logElement.scrollTop = logElement.scrollHeight;\n  };`;\n  const [ollamaModels, setOllamaModels] = useState([]);\n  const [ollamaAvailable, setOllamaAvailable] = useState(true);\n  const [anthropicAvailable, setAnthropicAvailable] = useState(false);\n  const [divs, setDivs] = useState([\n    {\n      id: 1,\n      content: (\n        <CodeEditor\n          handleChange={handleChange}\n          selectedCode={selectedCode}\n          appName={appName}\n          setAppNameVal={setAppNameVal}\n          downloadCode={downloadCode}\n          jsCode={jsCode}\n          htmlCode={htmlCode}\n          handleEditorDidMountJs={handleEditorDidMountJs}\n          handleEditorDidMountHtml={handleEditorDidMountHtml}\n          updateCodeValueJs={updateCodeValueJs}\n          updateCodeValueHtml={updateCodeValueHtml}\n          updateCodeValueBabel={updateCodeValueBabel}\n          babelCode={babelCode}\n          handleEditorDidMountBabel={handleEditorDidMountBabel}\n          name=\"Code Editor\"\n        />\n      ),\n    },\n    {\n      id: 2,\n      content: (\n        <ChatSettings\n          chatProvider={chatProvider}\n          setChatProvider={setChatProvider}\n          ollamaConfig={ollamaConfig}\n          setOllamaConfig={setOllamaConfig}\n          openAiCongig={openAiCongig}\n          setOpenAiCongig={setOpenAiCongig}\n          ollamaAvailable={ollamaAvailable}\n          setApiKeyVal={setApiKeyVal}\n          apiKey={apiKey}\n          resetApiKey={resetApiKey}\n          name=\"Chat Settings\"\n          anthropicAvailable={anthropicAvailable}\n        />\n      ),\n    },\n    {\n      id: 3,\n      content: (\n        <CustomIframe\n          jsCode={jsCode}\n          htmlCode={htmlCode}\n          consoleLog={consoleLog}\n          transpileJSX={transpileJSX}\n          messageFinished={messageFinished}\n          name=\"App Preview\"\n        />\n      ),\n    },\n    { id: 4, content: <LogSection name=\"Log Section\" /> },\n    {\n      id: 5,\n      content: (\n        <ChatView\n          inputSubmit={inputSubmit}\n          inputMessage={inputMessage}\n          setInputVal={setInputVal}\n          messageFinished={messageFinished}\n          fullMessage={fullMessage}\n          chatMessages={chatMessages}\n          name=\"Chat View\"\n          resetChatMessages={resetChatMessages}\n        />\n      ),\n    },\n  ]);\n  //handle fullMessage\n  useEffect(() => {\n    //console.log(fullMessage);\n    //last chatMessage content is fullmessage\n    //const newMessage = [...chatMessages];\n    //newMessage[newMessage.length - 1].content = fullMessage;\n    //setChatMessages(newMessage);\n    const codesSnippets = extractCodeSnippets(fullMessage);\n    for (const codeSnippet of codesSnippets) {\n      if (codeSnippet.language === \"html\") {\n        setHtmlCode(codeSnippet.code);\n        editorHtmlRef.current?.setValue(codeSnippet.code);\n        // if (editorJsRef.current) {\n        //   const currentCode = selectedCode === \"js\" ? jsCode : codeSnippet.code;\n        //   editorJsRef.current?.setValue(currentCode);\n        // }\n      }\n      if (\n        codeSnippet.language === \"js\" ||\n        codeSnippet.language === \"jsx\" ||\n        codeSnippet.language === \"tsx\"\n      ) {\n        if (codeSnippet.status == \"completed\" && true) {\n          codeSnippet.code = codeSnippet.code.replace(\n            \"import twindSetup\",\n            \"import { setup as twindSetup }\"\n          );\n          codeSnippet.code = codeSnippet.code.replace(\n            `from \"react\"`,\n            `from \"https://esm.sh/react\"`\n          );\n          codeSnippet.code = codeSnippet.code.replace(\"\", \"\");\n          codeSnippet.code = codeSnippet.code.replace(\n            \"/tailwind/'\",\n            \"/tailwind/shim'\"\n          );\n          codeSnippet.code = codeSnippet.code.replace(\n            '/tailwind/\"',\n            '/tailwind/shim\"'\n          );\n          if (codeSnippet.code.indexOf(\"import ReactDOM\") === -1) {\n            codeSnippet.code =\n              'import ReactDOM from \"https://esm.sh/react-dom\"; //imported automatically\\n' +\n              codeSnippet.code;\n          }\n          if (\n            codeSnippet.code.indexOf(\"import React \") == -1 &&\n            codeSnippet.code.indexOf(\"import React, \") == -1\n          ) {\n            codeSnippet.code =\n              'import React, { useState, useEffect, useRef } from \"https://esm.sh/react\"; //imported automatically\\n' +\n              codeSnippet.code;\n          }\n          if (\n            codeSnippet.code.indexOf(\"import { setup as twindSetup }\") == -1\n          ) {\n            codeSnippet.code =\n              'import { setup as twindSetup } from \"https://cdn.skypack.dev/twind/shim\"; //imported automatically\\ntwindSetup();\\n' +\n              codeSnippet.code;\n          }\n          if (\n            codeSnippet.code.indexOf(\"twindSetup()\") == -1\n          ) {\n            codeSnippet.code =\n              'twindSetup(); //imported automatically\\n' +\n              codeSnippet.code;\n          }\n        }\n        setJsCode(codeSnippet.code);\n        editorJsRef.current?.setValue(codeSnippet.code);\n        // if (editorJsRef.current) {\n        //   const currentCode =\n        //     selectedCode === \"js\" ? codeSnippet.code : htmlCode;\n        //   editorJsRef.current?.setValue(currentCode);\n        // }\n      }\n    }\n  }, [fullMessage]);\n  //get ollama models\n  useEffect(() => {\n    const getOllamaModel = async () => {\n      const ollama = new OpenAI({\n        baseURL: ollamaConfig.baseURL,\n        apiKey: \"ollama\",\n        dangerouslyAllowBrowser: true,\n      });\n      const modelList = await ollama.models.list();\n      const theModels = modelList.data;\n      console.log(modelList);\n      console.log(theModels);\n      setOllamaConfig({ ...ollamaConfig, models: theModels });\n    };\n    getOllamaModel();\n  }, []);\n  //get openai models\n  useEffect(() => {\n    const getOpenAiModel = async () => {\n      if (apiKey == \"\" || apiKey == undefined) {\n        return;\n      }\n      const ollama = new OpenAI({\n        apiKey: apiKey,\n        dangerouslyAllowBrowser: true,\n      });\n      const modelList = await ollama.models.list();\n      const theModels = modelList.data;\n      console.log(modelList);\n      console.log(theModels);\n      setOpenAiCongig({ ...openAiCongig, models: theModels });\n    };\n    getOpenAiModel();\n  }, [apiKey]);\n  //get openai api key\n  useEffect(() => {\n    const updateUser = async () => {\n      const isSignedIn = puter.auth.isSignedIn();\n      if (!isSignedIn) {\n        await puter.auth.signIn();\n      }\n      const user = await puter.auth.getUser();\n      setUsername(user.username);\n      //await puter.kv.del(\"openai_api_key\")\n      //resetChatMessages();\n      const openai_api_key = await puter.kv.get(\"openai_api_key\");\n      if (openai_api_key) {\n        setApiKey(openai_api_key);\n        setChatProvider(\"openai\");\n      }\n    };\n    updateUser();\n  }, []);\n  \n  //check if anthropic is available on port 3002\n  useEffect(() => {\n    fetch(\"http://localhost:3002/health\")\n      .then((response) => response.text())\n      .then((data) => {if(data==\"ok\"){setAnthropicAvailable(true)}else{setAnthropicAvailable(false)};console.log(data)})\n      .catch((error) => {\n        console.log(error);\n        console.log(\"anthropic not avaliable\")\n        setAnthropicAvailable(false);\n      });\n  }, []);\n  //match selected code\n  useEffect(() => {\n    editorHtmlRef.current?.setValue(htmlCode);\n    editorJsRef.current?.setValue(jsCode);\n  }, [selectedCode]);\n  //update divs ChatView\n  useEffect(() => {\n    setDivs((prevDivs) =>\n      prevDivs.map((div) => {\n        if (div.content.type === ChatView) {\n          return {\n            ...div,\n            content: (\n              <ChatView\n                inputSubmit={inputSubmit}\n                inputMessage={inputMessage}\n                setInputVal={setInputVal}\n                messageFinished={messageFinished}\n                fullMessage={fullMessage}\n                chatMessages={chatMessages}\n                name=\"Chat View\"\n                resetChatMessages={resetChatMessages}\n              />\n            ),\n          };\n        }\n        return div;\n      })\n    );\n  }, [inputMessage, messageFinished, fullMessage, chatMessages]);\n  //update divs Navbar\n  useEffect(() => {\n    setDivs((prevDivs) =>\n      prevDivs.map((div) => {\n        if (div.content.type === NavBar) {\n          return {\n            ...div,\n            content: (\n              <NavBar\n                inputSubmit={inputSubmit}\n                setGptValue={setGptValue}\n                gptVal={gptVal}\n                resetApiKey={resetApiKey}\n                visibleApiKey={visibleApiKey}\n                username={username}\n                inputMessage={inputMessage}\n                setInputVal={setInputVal}\n                setChatProvider={setChatProvider}\n                chatProvider={chatProvider}\n                ollamaConfig={ollamaConfig}\n                sendMenuAction={sendMenuAction}\n              />\n            ),\n          };\n        }\n        return div;\n      })\n    );\n  }, [inputMessage, gptVal, apiKey, chatProvider, username]);\n  //update divs ChatSettings\n  useEffect(() => {\n    setDivs((prevDivs) =>\n      prevDivs.map((div) => {\n        if (div.content.type === ChatSettings) {\n          return {\n            ...div,\n            content: (\n              <ChatSettings\n                chatProvider={chatProvider}\n                setChatProvider={setChatProvider}\n                ollamaConfig={ollamaConfig}\n                setOllamaConfig={setOllamaConfig}\n                openAiCongig={openAiCongig}\n                setOpenAiCongig={setOpenAiCongig}\n                ollamaAvailable={ollamaAvailable}\n                setApiKeyVal={setApiKeyVal}\n                apiKey={apiKey}\n                resetApiKey={resetApiKey}\n                name=\"Chat Settings\"\n                anthropicAvailable={anthropicAvailable}\n              />\n            ),\n          };\n        }\n        return div;\n      })\n    );\n  }, [chatProvider, ollamaConfig, openAiCongig, apiKey]);\n  //update divs LogSection\n  //update divs CodeEditor\n  useEffect(() => {\n    setDivs((prevDivs) =>\n      prevDivs.map((div) => {\n        if (div.content.type === CodeEditor) {\n          return {\n            ...div,\n            content: (\n              <CodeEditor\n                handleChange={handleChange}\n                selectedCode={selectedCode}\n                appName={appName}\n                setAppNameVal={setAppNameVal}\n                downloadCode={downloadCode}\n                jsCode={jsCode}\n                htmlCode={htmlCode}\n                handleEditorDidMountJs={handleEditorDidMountJs}\n                handleEditorDidMountHtml={handleEditorDidMountHtml}\n                updateCodeValueJs={updateCodeValueJs}\n                updateCodeValueHtml={updateCodeValueHtml}\n                updateCodeValueBabel={updateCodeValueBabel}\n                babelCode={babelCode}\n                handleEditorDidMountBabel={handleEditorDidMountBabel}\n                name=\"Code Editor\"\n              />\n            ),\n          };\n        }\n        return div;\n      })\n    );\n  }, [jsCode, htmlCode, appName, selectedCode, babelCode]);\n  //update divs CustomIframe\n  useEffect(() => {\n    setDivs((prevDivs) =>\n      prevDivs.map((div) => {\n        if (div.content.type === CustomIframe) {\n          return {\n            ...div,\n            content: (\n              <CustomIframe\n                jsCode={jsCode}\n                htmlCode={htmlCode}\n                consoleLog={consoleLog}\n                transpileJSX={transpileJSX}\n                messageFinished={messageFinished}\n                name=\"App Preview\"\n              />\n            ),\n          };\n        }\n        return div;\n      })\n    );\n  }, [jsCode, htmlCode, messageFinished]);\n  const [showDeployForm, setShowDeployForm] = useState(false);\n  const [showSaveAsForm, setShowSaveAsForm] = useState(false);\n  const [showGuideView, setShowGuideView] = useState(false);\n  return (\n    <div className=\"dark:bg-dark bg-light\">\n      {showGuideView && <GuideView setShowGuideView={setShowGuideView} />}\n      {showDeployForm && (\n        <DeployForm\n          appName={appName}\n          setAppNameVal={setAppNameVal}\n          subdomain={\"subdomain\"}\n          setSubdomainVal={() => {}}\n          deploy={downloadCode}\n          cancel={setShowDeployForm}\n        />\n      )}\n      {showSaveAsForm && (\n        <SaveAsForm\n          appName={appName}\n          setAppNameVal={setAppNameVal}\n          saveAs={saveAs}\n          cancelSaveAs={setShowSaveAsForm}\n        />\n      )}\n      <NavBar\n        inputSubmit={inputSubmit}\n        setGptValue={setGptValue}\n        gptVal={gptVal}\n        resetApiKey={resetApiKey}\n        visibleApiKey={visibleApiKey}\n        username={username}\n        inputMessage={inputMessage}\n        setInputVal={setInputVal}\n        setChatProvider={setChatProvider}\n        chatProvider={chatProvider}\n        ollamaConfig={ollamaConfig}\n        sendMenuAction={sendMenuAction}\n      />\n      <Space.ViewPort className=\"w-full dark:bg-dark bg-light\">\n        <Space.Top\n          size=\"50px\"\n          touchHandleSize={20}\n          trackSize={false}\n          scrollable={true}\n        >\n          <Space.Fill trackSize={true}></Space.Fill>\n        </Space.Top>\n        <Space.Bottom\n          size=\"92%\"\n          touchHandleSize={20}\n          trackSize={false}\n          scrollable={true}\n        >\n          <Space.Fill trackSize={true}>\n            <Space.LeftResizable\n              size=\"30%\"\n              touchHandleSize={20}\n              trackSize={false}\n              scrollable={true}\n            >\n              <Space.Fill trackSize={true}>\n                <DraggableUI\n                  id={5}\n                  onDragStart={onDragStart}\n                  onDragEnd={onDragEnd}\n                  onDragOver={onDragOver}\n                  onDrop={onDrop}\n                  getDivContent={getDivContent}\n                  draggingId={draggingId}\n                  divs={divs}\n                />\n              </Space.Fill>\n            </Space.LeftResizable>\n            <Space.LeftResizable\n              size=\"40%\"\n              touchHandleSize={20}\n              trackSize={false}\n              scrollable={true}\n            >\n              <Space.Fill trackSize={true}>\n                <DraggableUI\n                  id={1}\n                  onDragStart={onDragStart}\n                  onDragEnd={onDragEnd}\n                  onDragOver={onDragOver}\n                  onDrop={onDrop}\n                  getDivContent={getDivContent}\n                  draggingId={draggingId}\n                  divs={divs}\n                />\n              </Space.Fill>\n              <Space.BottomResizable\n                size=\"5%\"\n                touchHandleSize={20}\n                trackSize={true}\n                scrollable={true}\n              >\n                <Space.Fill>\n                  <DraggableUI\n                    id={2}\n                    onDragStart={onDragStart}\n                    onDragEnd={onDragEnd}\n                    onDragOver={onDragOver}\n                    onDrop={onDrop}\n                    getDivContent={getDivContent}\n                    draggingId={draggingId}\n                    divs={divs}\n                  />\n                </Space.Fill>\n              </Space.BottomResizable>\n            </Space.LeftResizable>\n            <Space.Fill\n              size=\"30%\"\n              touchHandleSize={20}\n              trackSize={true}\n              scrollable={true}\n            >\n              <Space.Fill trackSize={true}>\n                <DraggableUI\n                  id={3}\n                  onDragStart={onDragStart}\n                  onDragEnd={onDragEnd}\n                  onDragOver={onDragOver}\n                  onDrop={onDrop}\n                  getDivContent={getDivContent}\n                  draggingId={draggingId}\n                  divs={divs}\n                />\n              </Space.Fill>\n              <Space.BottomResizable\n                size=\"5%\"\n                touchHandleSize={20}\n                trackSize={true}\n                scrollable={true}\n              >\n                <Space.Fill>\n                  <DraggableUI\n                    id={4}\n                    onDragStart={onDragStart}\n                    onDragEnd={onDragEnd}\n                    onDragOver={onDragOver}\n                    onDrop={onDrop}\n                    getDivContent={getDivContent}\n                    draggingId={draggingId}\n                    divs={divs}\n                  />\n                </Space.Fill>\n              </Space.BottomResizable>\n            </Space.Fill>\n          </Space.Fill>\n        </Space.Bottom>\n      </Space.ViewPort>\n    </div>\n  );\n};\nReactDOM.render(<DraggableApp />, document.getElementById(\"app\"));\n\n\n\n\nWhat can you say about this code to improve it?\n"
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "Here are a few suggestions to improve the code:\n\n1. Break down the large component into smaller, reusable components. The `DraggableApp` component is quite large and contains a lot of logic. Consider breaking it down into smaller, more focused components to improve readability and maintainability.\n\n2. Use more descriptive names for variables and functions. Some variable names like `divs` and `getDivContent` are a bit generic. Consider using more descriptive names that convey the purpose of the variable or function.\n\n3. Use a more structured approach for managing state. The component uses multiple `useState` hooks to manage various pieces of state. Consider using a state management library like Redux or the Context API to centralize and manage the state more effectively.\n\n4. Optimize the use of `useEffect` hooks. There are several `useEffect` hooks that update the `divs` state based on changes in other state variables. Consider consolidating these effects and optimizing them to avoid unnecessary re-renders.\n\n5. Extract the logic for fetching models and checking the availability of services into separate functions or custom hooks. This will make the component more readable and easier to understand.\n\n6. Use a more robust error handling mechanism. The code uses `try-catch` blocks to handle errors, but it doesn't provide a consistent way to handle and display error messages to the user. Consider implementing a more comprehensive error handling strategy.\n\n7. Add comments and documentation. While the code is relatively well-structured, adding comments and documentation can help other developers (or yourself in the future) understand the purpose and functionality of different parts of the code.\n\n8. Consider using a styling library or writing more modular CSS. The component uses Tailwind CSS classes directly in the JSX, which can make the code a bit harder to read. Consider using a styling library like styled-components or writing more modular CSS to keep the styling separate from the component logic.\n\n9. Implement proper accessibility. Ensure that the application is accessible to users with disabilities by following accessibility guidelines, such as using proper ARIA attributes and keyboard navigation.\n\n10. Optimize performance. Analyze the performance of the application and identify any potential bottlenecks. Consider implementing techniques like lazy loading, memoization, and virtualization to improve the overall performance of the application.\n\nThese are just a few suggestions, and the specific improvements will depend on the goals and requirements of the project. It's always a good idea to continuously review and refactor the code to ensure it remains maintainable, scalable, and efficient."
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Fine\nDo\n1. Break down the large component into smaller, reusable components. The `DraggableApp` component is quite large and contains a lot of logic. Consider breaking it down into smaller, more focused components to improve readability and maintainability.\n\ndont ommit anything, write everything.\nwrite code snippets with in first line :\n//file: [filepath/of/the/file]\n\nYou will write each files sequencialy, i will ask you one file at a time\nyou always write the full file since this code must work perfectly.\n\nMake the file listing and only that for now, i will ask you for the files later\n\nMake the file list"
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "Here's the file listing for breaking down the `DraggableApp` component into smaller, reusable components:\n\n1. src/components/GuideView.js\n2. src/components/MarkDownView.js\n3. src/components/ChatSettings.js\n4. src/components/DeployForm.js\n5. src/components/SaveAsForm.js\n6. src/components/LogSection.js\n7. src/components/CustomIframe.js\n8. src/components/TheEditorJs.js\n9. src/components/TheEditorHtml.js\n10. src/components/TheEditorBabel.js\n11. src/components/CodeEditor.js\n12. src/components/ChatView.js\n13. src/components/NavBar.js\n14. src/components/DraggableUI.js\n15. src/App.js\n16. src/index.js\n\nThese files will contain the smaller, more focused components extracted from the `DraggableApp` component, as well as the main `App` component and the entry point of the application (`index.js`)."
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Ok, Make the first file entirely and only the first file"
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "//file: src/components/GuideView.js\n\nimport React from \"react\";\nimport Markdown from \"https://esm.sh/markdown-to-jsx\";\n\nconst GuideView = ({ setShowGuideView }) => {\n  const SnippetView = ({ children, ...props }) => {\n    const isJsx =\n      children.indexOf(\"import \") != -1 || children.indexOf(\"const \") != -1\n        ? \"jsx\"\n        : \"html\";\n    return (\n      <>\n        <div\n          {...props}\n          className=\"flex flex-col  dark:bg-black bg-white  rounded-lg\"\n        >\n          <span className=\"w-full top-0 px-4 bg-gray-600 rounded-t-lg flex justify-between\">\n            <span>{isJsx}</span>\n            <span>copy</span>\n          </span>\n          <span className=\"w-full p-4 overflow-scroll\">{children}</span>\n        </div>\n      </>\n    );\n  };\n\n  const LiView = ({ children, ...props }) => (\n    <>\n      {\" \"}\n      - {children}\n      <br></br>\n    </>\n  );\n\n  const TheH4 = ({ children, ...props }) => (\n    <div className=\"mt-4\">{children}</div>\n  );\n\n  const guideMessage = `# User Guide\n## Code Editor\n- Based on Monaco editor (Vs Code) \n- Same shortcut\n- Multiple cursor\n- Syntax Highliting\n  \nYou don't need to install any dependencies\nSimply add it like normaly. In the Babel transpile, all import are appended with \"https://esm.sh\" which host a ton of ES6 modules\n### 3 Files : \n- html : the html template where react components are injected\n- javascript : the react/javascript code\n- Babel : The Executed Code transpiled from React (jsx) to js. Don't modify it as it has no effect. It is just a representation of the transpiled jsx code.\n## App Preview\n- Each time the code is modified, the app preview is updated\n## SaveAs\n- Enter a Name and the project will be saved on App folder\n- A message pop up wen it is successfull (2-10 sec)\n## Deploy\n- Enter a Name and the project deployed as an App \n- A message pop up wen it is successfull (2-10 sec)\n## Chat Settings\nSelect your language model : \n- puter : gpt-3.5-turbo, no streaming, free\n- openAi : every model available, streaming, require api key. The api key is stored in puter kv field openai_api_key. Only the app has access.\n- liteLLM : every model avaliable on litellm[proxy], streaming.\n## Chat View\n- Enter to submit message\n- Shift+Enter to create a new line\n- You can ask the AI what you want to build.\n- If you have specific libraries in mind just tell it.\n- When you press play, Crazy Typing Cat Appears to let you now that the AI is working\n- At the end of the generation , Crazy Typing Cat dissapear, The App Preview is updated with the new code and the message history is shown.\n- The AI remember past message in the same session so you can ask \"Make a cool clock app\" Then when it's done \"Perfect, add a color background animation to it\"\nWhen the code is not working and it will happen, it might be several issue : \n- Code is not completed\n- twindSetup() is not instanciated, just add it after import of tailwind\n- On the console, check the errors, AI often hallucinate a package that does everything perfectly like \n\\`\\`\\`\nimport {TripleAGame} from \"https://esm.sh/triple-a-game\"\n\\`\\`\\`\n## Prompt ingenering\nThe AI is told to be an excellent React Developper\nIt has been provided with several free api url like :\n\\`\\`\\`\nhttps://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&current_weather=true=> \"current_weather\"\nhttps://api.coingecko.com/api \nhttps://api.multiversx.com/economics?extract=price for EGLD=> \"price\"\nhttps://www.francetvinfo.fr/titres.rss => entries \"title\" and \"summary\" and \"links[0] as href \" and \"links[1] as image \" For the News with feedparser library\n\\`\\`\\`\n#### You can provide it more in the message in the same way.\nIf you want to make an interactive game, ask it to use p5.js\nTry using Three.js for 3d graphics (puter ai is not that good for it)\n## Console\na simple javascript console view that show console.log and console.error (in red)\n- require to use JSON.stringify to show objects as it display a string on the console\n ## LiteLLM\n LiteLLM can let you access a lot of llm\n \n - Free : ollama => llama, dolphin-mixtral, mistral, ....\n - Paid : Anthropic Claude, Google AI, Hugginface, Mistral\n install litellm and litellm[proxy]\n\\`\\`\\`sh\npip install litell litellm[proxy]\n\\`\\`\\`\n#### create a config.yaml file like:\n\\`\\`\\`yaml\nmodel_list: \n  - model_name: ollama/dolphin-mistral\n    litellm_params:\n      model: ollama/dolphin-mistral\n  - model_name: ollama/phi\n    litellm_params:\n      model: ollama/phi\n  - model_name: claude-3-opus-20240229\n    litellm_params:\n      model: claude-3-opus-20240229\n      api_key: sk-****************\n\\`\\`\\`\n#### run litellm[proxy]\n\\`\\`\\`sh\nlitellm --config config.yaml\n\\`\\`\\`\n#### It should be running on port 4000\n  `;\n\n  return (\n    <div className=\"fixed top-0 left-0 w-full h-full dark:bg-dark bg-light dark:text-light text-dark bg-opacity-50 flex flex-col items-center justify-center z-50\">\n      <div className=\"w-3/4 h-3/4 opacity-100 border flex flex-col rounded-lg  overflow-y-hidden justify-between\">\n        <span className=\"w-full top-0  bg-gray-600 rounded-t-lg flex justify-between\">\n          <button\n            onClick={() => {\n              setShowGuideView(false);\n            }}\n            className=\"w-1/4 dark:bg-dark bg-light border rounded-lg px-2\"\n          >\n            About Me\n          </button>\n          <h1>User Guide</h1>\n          <button\n            onClick={() => {\n              setShowGuideView(false);\n            }}\n            className=\"w-1/4 dark:bg-dark bg-light border rounded-lg px-2\"\n          >\n            close\n          </button>\n        </span>\n        <div className=\"w-full h-full overflow-y-scroll p-4\">\n          <Markdown\n            options={{\n              overrides: {\n                h1: {\n                  props: {\n                    className: \"text-lg font-bold py-2\",\n                  },\n                },\n                h2: {\n                  props: {\n                    className: \"text-lg  py-2 underline\",\n                  },\n                },\n                h3: {\n                  props: {\n                    className: \"text-md underline py-2\",\n                  },\n                },\n                h4: {\n                  component: TheH4,\n                  props: {\n                    className: \"py-2\",\n                  },\n                },\n                pre: {\n                  props: {\n                    className:\n                      \"dark:bg-black bg-white dark:text-light text-dark border rounded-lg  mt-3\",\n                  },\n                },\n                code: {\n                  component: SnippetView,\n                },\n                li: {\n                  component: LiView,\n                },\n              },\n            }}\n          >\n            {guideMessage}\n          </Markdown>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GuideView;"
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Ok, Make file 2 entirely and only the file 2"
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "//file: src/components/MarkDownView.js\n\nimport React from \"react\";\nimport Markdown from \"https://esm.sh/markdown-to-jsx\";\n\nconst MarkDownView = ({ content, className }) => {\n  const SnippetView = ({ children, ...props }) => {\n    const isJsx =\n      children.indexOf(\"import \") != -1 || children.indexOf(\"const \") != -1\n        ? \"jsx\"\n        : \"html\";\n    return (\n      <>\n        <div\n          {...props}\n          className=\"flex flex-col  dark:bg-black bg-white  rounded-lg\"\n        >\n          <span className=\"w-full top-0 px-2 bg-gray-600 rounded-t-lg flex justify-between\">\n            <span>{isJsx}</span>\n            <span>copy</span>\n          </span>\n          <span className=\"w-full p-4 overflow-scroll\">{children}</span>\n        </div>\n      </>\n    );\n  };\n\n  const LiView = ({ children, ...props }) => (\n    <>\n      {\" \"}\n      - {children}\n      <br></br>\n    </>\n  );\n\n  const TheH4 = ({ children, ...props }) => (\n    <div className=\"mt-4\">{children}</div>\n  );\n\n  return (\n    <Markdown\n      className={className}\n      options={{\n        overrides: {\n          h1: {\n            props: {\n              className: \"text-lg font-bold py-2\",\n            },\n          },\n          h2: {\n            props: {\n              className: \"text-lg  py-2 underline\",\n            },\n          },\n          h3: {\n            props: {\n              className: \"text-md underline py-2\",\n            },\n          },\n          h4: {\n            component: TheH4,\n            props: {\n              className: \"py-2\",\n            },\n          },\n          pre: {\n            props: {\n              className:\n                \"dark:bg-black bg-white dark:text-light text-dark border rounded-lg  mt-3\",\n            },\n          },\n          code: {\n            component: SnippetView,\n          },\n          li: {\n            component: LiView,\n          },\n        },\n      }}\n    >\n      {content}\n    </Markdown>\n  );\n};\n\nexport default MarkDownView;"
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Ok, Make file 3 entirely and only the file 3"
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "//file: src/components/ChatSettings.js\n\nimport React from \"react\";\n\nconst ChatSettings = ({\n  chatProvider,\n  setChatProvider,\n  ollamaConfig,\n  setOllamaConfig,\n  openAiCongig,\n  setOpenAiCongig,\n  ollamaAvailable,\n  setApiKeyVal,\n  apiKey,\n  resetApiKey,\n  anthropicAvailable,\n}) => {\n  return (\n    <div className=\"flex flex-col items-center justify-center h-screen\">\n      <div className=\"flex flex-col items-center justify-center\">\n        <h1 className=\"text-4xl font-semibold dark:text-light text-dark\">\n          Chat Settings\n        </h1>\n        <div className=\"flex flex-col items-center justify-center\">\n          <div className=\"flex flex-col items-center justify-center\">\n            <h2 className=\"text-2xl font-semibold dark:text-light text-dark\">\n              Chat Provider\n            </h2>\n            <select\n              value={chatProvider}\n              onChange={(e) => setChatProvider(e.target.value)}\n              className=\"dark:bg-dark bg-light dark:text-light text-dark rounded p-2\"\n            >\n              <option value=\"openai\">OpenAI</option>\n              {anthropicAvailable && <option value=\"anthropic\">Anthropic</option>}\n              {ollamaAvailable && <option value=\"ollama\">LiteLLM</option>}\n              <option value=\"puter\">Puter</option>\n            </select>\n          </div>\n          {chatProvider === \"ollama\" && (\n            <div className=\"flex flex-col items-center justify-center\">\n              <h2 className=\"text-2xl font-semibold dark:text-light text-dark\">\n                Ollama Config\n              </h2>\n              <form\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  setOllamaConfig({ ...ollamaConfig, baseURL: e.target.value });\n                }}\n              >\n                <input\n                  className=\"dark:bg-dark bg-light dark:text-light text-dark rounded p-2\"\n                  placeholder=\"Base URL\"\n                />\n              </form>\n              <select\n                value={ollamaConfig.selectedModel}\n                onChange={(e) =>\n                  setOllamaConfig({\n                    ...ollamaConfig,\n                    selectedModel: e.target.value,\n                  })\n                }\n                className=\"dark:bg-dark bg-light dark:text-light text-dark rounded p-2\"\n              >\n                {ollamaConfig.models.map((model) => (\n                  <option value={model.id}>{model.id}</option>\n                ))}\n              </select>\n            </div>\n          )}\n          {chatProvider === \"openai\" && (\n            <div className=\"flex flex-col items-center justify-center\">\n              <h2 className=\"text-2xl font-semibold dark:text-light text-dark\">\n                OpenAI Config\n              </h2>\n              {apiKey === \"\" && (\n                <input\n                  value={apiKey}\n                  onChange={setApiKeyVal}\n                  className=\"dark:bg-dark bg-light dark:text-light text-dark rounded p-2\"\n                  placeholder=\"OpenAI API Key\"\n                />\n              )}\n              {apiKey !== \"\" && (\n                <>\n                  <select\n                    value={openAiCongig.selectedModel}\n                    onChange={(e) =>\n                      setOpenAiCongig({\n                        ...openAiCongig,\n                        selectedModel: e.target.value,\n                      })\n                    }\n                    className=\"dark:bg-dark bg-light dark:text-light text-dark rounded p-2\"\n                  >\n                    {openAiCongig.models.map((model) => (\n                      <option value={model.id}>{model.id}</option>\n                    ))}\n                  </select>\n                  <button\n                    onClick={resetApiKey}\n                    className=\"dark:bg-dark bg-light dark:text-light text-dark rounded p-2\"\n                  >\n                    Reset API Key\n                  </button>\n                </>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatSettings;"
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Ok, Make file 4 entirely and only the file 4"
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "//file: src/components/DeployForm.js\n\nimport React from \"react\";\n\nconst DeployForm = ({\n  appName,\n  setAppNameVal,\n  subdomain,\n  setSubdomainVal,\n  deploy,\n  cancel,\n}) => {\n  return (\n    <div className=\"fixed top-0 left-0 w-full h-full dark:bg-dark bg-light bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"dark:bg-dark bg-light rounded-lg p-4\">\n        <h1 className=\"text-2xl font-semibold dark:text-light text-dark\">\n          Deploy\n        </h1>\n        <p className=\"dark:text-light text-dark\">\n          Deploy your app to a subdomain and create an app.\n        </p>\n        <form\n          onSubmit={() => {\n            deploy();\n            cancel(false);\n          }}\n        >\n          <input\n            className=\"dark:bg-dark bg-light dark:text-light text-dark rounded p-2\"\n            placeholder=\"App Name\"\n            onChange={setAppNameVal}\n            value={appName}\n          />\n          <button className=\"dark:bg-dark bg-light dark:text-light text-dark rounded p-2\">\n            Deploy\n          </button>\n        </form>\n        <button\n          className=\"dark:bg-dark bg-light dark:text-light text-dark rounded p-2\"\n          onClick={() => {\n            cancel(false);\n          }}\n        >\n          Cancel\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default DeployForm;"
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Ok, Make file 5 entirely and only the file 5"
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "//file: src/components/SaveAsForm.js\n\nimport React from \"react\";\n\nconst SaveAsForm = ({ appName, setAppNameVal, saveAs, cancelSaveAs }) => {\n  return (\n    <div className=\"fixed top-0 left-0 w-full h-full dark:bg-dark bg-light bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"dark:bg-dark bg-light rounded-lg p-4\">\n        <h1 className=\"text-2xl font-semibold dark:text-light text-dark\">\n          Save as\n        </h1>\n        <p className=\"dark:text-light text-dark\">\n          Save your project in a puter folder\n        </p>\n        <form\n          onSubmit={(e) => {\n            saveAs(e);\n          }}\n        >\n          <input\n            className=\"dark:bg-dark bg-light dark:text-light text-dark rounded p-2\"\n            placeholder=\"App Name\"\n            onChange={setAppNameVal}\n            value={appName}\n          />\n          <button className=\"dark:bg-dark bg-light dark:text-light text-dark rounded p-2\">\n            Save as\n          </button>\n        </form>\n        <button\n          className=\"dark:bg-dark bg-light dark:text-light text-dark rounded p-2\"\n          onClick={() => {\n            cancelSaveAs(false);\n          }}\n        >\n          Cancel\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default SaveAsForm;"
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Ok, Make file 6 entirely and only the file 6"
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "//file: src/components/LogSection.js\n\nimport React from \"react\";\n\nconst LogSection = (name) => {\n  return (\n    <div className=\"w-full h-full bg-dark\">\n      <div className=\"dark:bg-dark bg-light w-full\">Console</div>\n      <pre\n        className=\"opacity-50 bottom-12 w-full h-full dark:bg-dark bg-light dark:text-light text-dark\"\n        id=\"logs\"\n        style={{ overflow: \"auto\" }}\n      ></pre>\n    </div>\n  );\n};\n\nexport default LogSection;"
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Ok, Make file 7 entirely and only the file 7"
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "//file: src/components/CustomIframe.js\n\nimport React from \"react\";\n\nfunction CustomIframe({\n  jsCode,\n  htmlCode,\n  consoleLog,\n  transpileJSX,\n  messageFinished,\n}) {\n  const cats = [\n    \"https://i.giphy.com/7NoNw4pMNTvgc.webp\",\n    \"https://c.tenor.com/y2JXkY1pXkwAAAAC/tenor.gif\",\n  ];\n\n  return (\n    <>\n      {messageFinished == 0 && (\n        <img\n          src=\"https://c.tenor.com/y2JXkY1pXkwAAAAC/tenor.gif\"\n          className=\"w-full h-full bg-dark\"\n        />\n      )}\n      {messageFinished == 1 && (\n        <iframe\n          className=\"w-full h-full dark:bg-dark bg-light dark:text-light text-dark border dark:border-light border-dark rounded shadow-lg\"\n          sandbox=\"allow-forms allow-modals allow-pointer-lock allow-popups allow-presentation allow-same-origin allow-scripts\"\n          srcDoc={\n            jsCode === \"\"\n              ? \"\"\n              : messageFinished\n              ? `<html>${htmlCode}<script src=\"https://js.puter.com/v2/\"></` +\n                `script><script type=\"module\">const puter = window.puter;\\n${transpileJSX(\n                  jsCode\n                )}<` +\n                `/script><div class=\"fixed bottom-0\"><pre class=\"fixed opacity-50 bottom-12 w-full dark:bg-dark bg-light dark:text-light text-dark\" id=\"logs2\"></pre></div><script>${consoleLog}</` +\n                `script></html>`\n              : \"\"\n          }\n        />\n      )}\n    </>\n  );\n}\n\nexport default CustomIframe;"
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Ok, Make file 8 entirely and only the file 8"
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "//file: src/components/TheEditorJs.js\n\nimport React from \"react\";\nimport Editor from \"https://esm.sh/@monaco-editor/react\";\n\nconst TheEditorJs = ({ handleEditorDidMount, jsCode, onChange, theme }) => {\n  return (\n    <Editor\n      height=\"90%\"\n      defaultLanguage={\"javascript\"}\n      defaultValue={jsCode}\n      theme={theme}\n      onMount={handleEditorDidMount}\n      onChange={onChange}\n      options={{\n        minimap: {\n          enabled: true,\n        },\n        cursorStyle: \"block\",\n      }}\n    />\n  );\n};\n\nexport default TheEditorJs;"
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Ok, Make file 8 entirely and only the file 8"
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "//file: src/components/TheEditorHtml.js\n\nimport React from \"react\";\nimport Editor from \"https://esm.sh/@monaco-editor/react\";\n\nconst TheEditorHtml = ({ handleEditorDidMount, htmlCode, onChange, theme }) => {\n  return (\n    <Editor\n      height=\"90%\"\n      defaultLanguage={\"html\"}\n      defaultValue={htmlCode}\n      theme={theme}\n      onMount={handleEditorDidMount}\n      onChange={onChange}\n      options={{\n        minimap: {\n          enabled: true,\n        },\n        cursorStyle: \"block\",\n      }}\n    />\n  );\n};\n\nexport default TheEditorHtml;"
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Ok, Make file 9 entirely and only the file 9"
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "//file: src/components/TheEditorBabel.js\n\nimport React from \"react\";\nimport Editor from \"https://esm.sh/@monaco-editor/react\";\n\nconst TheEditorBabel = ({\n  handleEditorDidMount,\n  babelCode,\n  onChange,\n  theme,\n}) => {\n  return (\n    <Editor\n      height=\"90%\"\n      defaultLanguage={\"javascript\"}\n      defaultValue={babelCode}\n      theme={theme}\n      onMount={handleEditorDidMount}\n      onChange={onChange}\n      options={{\n        minimap: {\n          enabled: true,\n        },\n        cursorStyle: \"block\",\n      }}\n    />\n  );\n};\n\nexport default TheEditorBabel;"
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Ok, Make file 10 entirely and only the file 10"
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "//file: src/components/CodeEditor.js\n\nimport React, { useState, useEffect } from \"react\";\nimport TheEditorJs from \"./TheEditorJs\";\nimport TheEditorHtml from \"./TheEditorHtml\";\nimport TheEditorBabel from \"./TheEditorBabel\";\n\nconst CodeEditor = ({\n  handleChange,\n  selectedCode,\n  appName,\n  setAppNameVal,\n  downloadCode,\n  jsCode,\n  htmlCode,\n  handleEditorDidMountHtml,\n  handleEditorDidMountJs,\n  updateCodeValueJs,\n  updateCodeValueHtml,\n  updateCodeValueBabel,\n  babelCode,\n  handleEditorDidMountBabel,\n  name,\n}) => {\n  const [theme, setTheme] = useState(\"vs-dark\");\n\n  const handleThemeChange = (event) => {\n    setTheme(event.target.value);\n  };\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    const handleChange = () => {\n      if (mediaQuery.matches) {\n        setTheme(\"vs-dark\");\n      } else {\n        setTheme(\"vs\");\n      }\n    };\n    mediaQuery.addListener(handleChange);\n    return () => mediaQuery.removeListener(handleChange);\n  }, []);\n\n  return (\n    <>\n      <div className=\"flex justify-between items-center p-4 dark:bg-dark bg-light \">\n        <select\n          onChange={handleChange}\n          value={selectedCode}\n          className=\"mx-4 py-2 px-3 bg-gray-700 dark:text-light text-dark rounded outline-none\"\n        >\n          <option value=\"js\">JavaScript</option>\n          <option value=\"html\">HTML</option>\n          <option value=\"babel\">Babel</option>\n        </select>\n        {selectedCode === \"babel\" && (\n          <span>\n            This is the Result javascript from the compilation. Modification are\n            not effectives\n          </span>\n        )}\n        <select\n          onChange={handleThemeChange}\n          value={theme}\n          className=\"mx-4 py-2 px-3 bg-gray-700 dark:text-light text-dark rounded outline-none\"\n        >\n          <option value=\"vs-dark\">vs-dark</option>\n          <option value=\"vs\">vs</option>\n          <option value=\"hc-black\">hi-contrast</option>\n        </select>\n      </div>\n      {selectedCode === \"js\" ? (\n        <TheEditorJs\n          handleEditorDidMount={handleEditorDidMountJs}\n          jsCode={jsCode}\n          onChange={updateCodeValueJs}\n          theme={theme}\n        />\n      ) : selectedCode === \"html\" ? (\n        <TheEditorHtml\n          handleEditorDidMount={handleEditorDidMountHtml}\n          htmlCode={htmlCode}\n          onChange={updateCodeValueHtml}\n          theme={theme}\n        />\n      ) : (\n        <TheEditorBabel\n          handleEditorDidMount={handleEditorDidMountBabel}\n          htmlCode={babelCode}\n          onChange={updateCodeValueBabel}\n          theme={theme}\n        />\n      )}\n    </>\n  );\n};\n\nexport default CodeEditor;"
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Ok, Make file 11 entirely and only the file 11"
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "//file: src/components/ChatView.js\n\nimport React from \"react\";\nimport MarkDownView from \"./MarkDownView\";\n\nconst ChatView = ({\n  inputSubmit,\n  inputMessage,\n  setInputVal,\n  messageFinished,\n  fullMessage,\n  chatMessages,\n  resetChatMessages,\n}) => {\n  return (\n    <div className=\"w-full h-full dark:bg-dark bg-light dark:text-light text-dark\">\n      <div className=\"w-full h-full\">\n        <div className=\"w-full h-full dark:bg-dark bg-light dark:text-light text-dark\">\n          <div className=\"w-full h-5/6 dark:bg-dark bg-light dark:text-light text-dark overflow-y-scroll\">\n            {chatMessages.map((message, index) => {\n              if (message.role !== \"system\") {\n                return (\n                  <div key={index} className={`w-full overflow-y-scroll p-4`}>\n                    <MarkDownView\n                      content={\n                        message.role == \"user\"\n                          ? \"# \" + message.content\n                          : message.content\n                      }\n                      className={` p-4 m-4 w-5/6 mx-2 px-2  opacity-100 overflow-y-scroll rounded  dark:text-light text-dark  ${\n                        message.role === \"assistant\"\n                          ? \"dark:bg-red-800 bg-red-400\"\n                          : \"dark:bg-blue-800 bg-blue-800\"\n                      }`}\n                    />\n                  </div>\n                );\n              }\n            })}\n          </div>\n        </div>\n      </div>\n      <div className=\"mt-2 dark:bg-dark bg-light absolute bottom-0 w-full flex\">\n        <textarea\n          type=\"text\"\n          rows={Math.max(inputMessage.split(\"\\n\").length, 2)}\n          placeholder={`Make a weather app for Ales, France\n          Make a btc graph , What are the news?\n          `}\n          className=\"bg-light text-dark ml-2 mb-2 h-3/4 w-full m-auto border dark:border-light border-dark rounded p-2 w-5/6\"\n          onKeyPress={(event) => {\n            if (event.key === \"Enter\" && !event.shiftKey) {\n              event.preventDefault();\n              inputSubmit(event);\n            }\n          }}\n          value={inputMessage}\n          onChange={setInputVal}\n        />\n        <button\n          onClick={resetChatMessages}\n          className=\"bottom-0 dark:bg-dark bg-light border dark:border-light border-dark hover:bg-gray-900 dark:text-light text-dark rounded mx-2 w-1/4\"\n        >\n          Clear Chat\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatView;"
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Ok, Make file 12 entirely and only the file 12"
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "//file: src/components/NavBar.js\n\nimport React, { useState } from \"react\";\n\nconst NavBar = ({\n  inputSubmit,\n  setGptValue,\n  gptVal,\n  resetApiKey,\n  visibleApiKey,\n  username,\n  inputMessage,\n  setInputVal,\n  chatProvider,\n  setChatProvider,\n  ollamaConfig,\n  sendMenuAction,\n}) => {\n  const [openMenu, setOpenMenu] = useState(\"\");\n\n  const toggleMenu = (menu) => {\n    setOpenMenu(openMenu === menu ? \"\" : menu);\n  };\n\n  const menuConfig = [\n    {\n      name: \"File\",\n      subMenu: [\n        { status: \"active\", name: \"New\", action: \"new\" },\n        { status: \"inactive\", name: \"Open\", action: \"open\" },\n        { status: \"inactive\", name: \"Import\", action: \"import\" },\n        { status: \"inactive\", name: \"Save\", action: \"save\" },\n        { status: \"active\", name: \"Save As\", action: \"saveAs\" },\n        { status: \"active\", name: \"Deploy\", action: \"deploy\" },\n      ],\n    },\n    {\n      name: \"Edit\",\n      subMenu: [\n        { status: \"inactive\", name: \"Undo\", action: \"undo\" },\n        { status: \"inactive\", name: \"Copy\", action: \"copy\" },\n        { status: \"inactive\", name: \"Cut\", action: \"cut\" },\n        { status: \"inactive\", name: \"Paste\", action: \"paste\" },\n      ],\n    },\n    {\n      name: \"View\",\n      subMenu: [\n        { status: \"inactive\", name: \"Fullscreen\", action: \"fullscreen\" },\n        { status: \"inactive\", name: \"Dark Mode\", action: \"darkMode\" },\n      ],\n    },\n    {\n      name: \"Help\",\n      subMenu: [\n        { status: \"inactive\", name: \"About Us\", action: \"aboutUs\" },\n        { status: \"active\", name: \"User Guide\", action: \"userGuide\" },\n      ],\n    },\n  ];\n\n  return (\n    <nav className=\"absolute w-full top-0 left-0 dark:bg-dark bg-light dark:text-light text-dark top-0 px-0 h-5 flex   z-50\">\n      <div className=\" w-full top-0 dark:bg-dark bg-light dark:text-light text-dark  px-0 flex justify-between\">\n        <div className=\"w-3/4 top-0 dark:bg-dark bg-light dark:text-light text-dark py-2 px-0\">\n          <span className=\"left-0 py-4 px-2\">\n            <span>\n              <b>Code With Ai</b>\n            </span>\n            <span className=\"absolute left-0 top-6 text-sm px-2\">\n              By SamLePirate\n            </span>\n          </span>\n          {menuConfig.map((menu, index) => (\n            <div className=\"relative inline-block\">\n              <span\n                tabIndex={index} // Makes the div focusable\n                // Handles focus event\n                onBlur={() => {\n                  setTimeout(() => toggleMenu(menu.name), 100);\n                }}\n                className={`${\n                  openMenu == menu.name ? \"bg-gray-700\" : \"\"\n                } cursor-pointer pt-3 pb-2 px-2 active:bg-gray-700  hover:bg-gray-700 hover:shadow-lg rounded-lg`}\n                onClick={() => toggleMenu(menu.name)}\n              >\n                {menu.name}\n              </span>\n              {openMenu === menu.name && (\n                <div className=\"absolute left-0 mt-2 w-48 dark:bg-dark bg-light rounded-md animate-appear border border-gray-700 shadow-lg z-50 \">\n                  {menu.subMenu.map((subMenu) => (\n                    <button\n                      className={`w-full text-left block px-4 py-2 border border-gray-700 text-sm text-gray-300 active:bg-gray-400 active:border-gray-700 active:text-dark transition-colors duration-100 ease-in-out hover:bg-gray-700 ${\n                        subMenu.status == \"inactive\" ? \"text-gray-600\" : \"\"\n                      }`}\n                      onClick={() => {\n                        setOpenMenu(\"\");\n                        sendMenuAction(subMenu.action);\n                      }}\n                    >\n                      {subMenu.name}\n                    </button>\n                  ))}\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n        <div className=\"justify-end py-2 px-0\">\n          <span className=\"cursor-pointer cursor-pointer pt-3 pb-2 px-2  hover:bg-gray-700 hover:shadow-lg rounded-lg\">\n            {visibleApiKey}\n            {username}\n          </span>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;"
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Ok, Make file 13 entirely and only the file 13"
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "//file: src/components/DraggableUI.js\n\nimport React from \"react\";\n\nconst DraggableUI = ({\n  id,\n  onDragStart,\n  onDragEnd,\n  onDragOver,\n  onDrop,\n  getDivContent,\n  draggingId,\n  divs,\n}) => {\n  return (\n    <div\n      key={id}\n      className={`w-full h-full dark:bg-dark bg-light dark:text-light text-dark border dark:border-light border-dark flex flex-col rounded shadow-lg  ${\n        draggingId === id ? \"opacity-30\" : \"opacity-100\"\n      }`}\n    >\n      <span className=\"flex justify-center border dark:border-light border-dark\">\n        <button\n          draggable\n          onDragStart={(e) => onDragStart(e, id)}\n          onDragEnd={onDragEnd}\n          onDragOver={onDragOver}\n          onDrop={(e) => onDrop(e, id)}\n          className={`absolute left-0 top-0  border dark:border-light border-dark rounded-lg w-8 shadow-lg hover:bg-gray-400  ${\n            draggingId === id ? \"opacity-10\" : \"opacity-100\"\n          } ${\n            draggingId !== id && draggingId\n              ? \"bg-red-700\"\n              : \"dark:bg-dark bg-light\"\n          }`}\n          style={{ cursor: \"grab\" }}\n        >\n          👋\n        </button>\n        <span className=\"\">\n          <span className=\"w-full flex justify-center\">\n            {divs.find((div) => div.id === id).content.props.name}\n          </span>\n        </span>\n      </span>\n      {getDivContent(id)}\n    </div>\n  );\n};\n\nexport default DraggableUI;"
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Ok, Make file 14 entirely and only the file 14"
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "//file: src/App.js\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport * as Space from \"https://esm.sh/react-spaces\";\nimport * as Babel from \"https://esm.sh/@babel/standalone\";\nimport OpenAI from \"https://esm.sh/openai\";\nimport { transform as transform } from \"https://esm.sh/sucrase\";\nimport GuideView from \"./components/GuideView\";\nimport DeployForm from \"./components/DeployForm\";\nimport SaveAsForm from \"./components/SaveAsForm\";\nimport NavBar from \"./components/NavBar\";\nimport DraggableUI from \"./components/DraggableUI\";\nimport CodeEditor from \"./components/CodeEditor\";\nimport ChatSettings from \"./components/ChatSettings\";\nimport CustomIframe from \"./components/CustomIframe\";\nimport LogSection from \"./components/LogSection\";\nimport ChatView from \"./components/ChatView\";\n\nconst DraggableApp = () => {\n  // ... (all the existing code from the original DraggableApp component)\n\n  return (\n    <div className=\"dark:bg-dark bg-light\">\n      {showGuideView && <GuideView setShowGuideView={setShowGuideView} />}\n      {showDeployForm && (\n        <DeployForm\n          appName={appName}\n          setAppNameVal={setAppNameVal}\n          subdomain={\"subdomain\"}\n          setSubdomainVal={() => {}}\n          deploy={downloadCode}\n          cancel={setShowDeployForm}\n        />\n      )}\n      {showSaveAsForm && (\n        <SaveAsForm\n          appName={appName}\n          setAppNameVal={setAppNameVal}\n          saveAs={saveAs}\n          cancelSaveAs={setShowSaveAsForm}\n        />\n      )}\n      <NavBar\n        inputSubmit={inputSubmit}\n        setGptValue={setGptValue}\n        gptVal={gptVal}\n        resetApiKey={resetApiKey}\n        visibleApiKey={visibleApiKey}\n        username={username}\n        inputMessage={inputMessage}\n        setInputVal={setInputVal}\n        setChatProvider={setChatProvider}\n        chatProvider={chatProvider}\n        ollamaConfig={ollamaConfig}\n        sendMenuAction={sendMenuAction}\n      />\n      <Space.ViewPort className=\"w-full dark:bg-dark bg-light\">\n        <Space.Top\n          size=\"50px\"\n          touchHandleSize={20}\n          trackSize={false}\n          scrollable={true}\n        >\n          <Space.Fill trackSize={true}></Space.Fill>\n        </Space.Top>\n        <Space.Bottom\n          size=\"92%\"\n          touchHandleSize={20}\n          trackSize={false}\n          scrollable={true}\n        >\n          <Space.Fill trackSize={true}>\n            <Space.LeftResizable\n              size=\"30%\"\n              touchHandleSize={20}\n              trackSize={false}\n              scrollable={true}\n            >\n              <Space.Fill trackSize={true}>\n                <DraggableUI\n                  id={5}\n                  onDragStart={onDragStart}\n                  onDragEnd={onDragEnd}\n                  onDragOver={onDragOver}\n                  onDrop={onDrop}\n                  getDivContent={getDivContent}\n                  draggingId={draggingId}\n                  divs={divs}\n                />\n              </Space.Fill>\n            </Space.LeftResizable>\n            <Space.LeftResizable\n              size=\"40%\"\n              touchHandleSize={20}\n              trackSize={false}\n              scrollable={true}\n            >\n              <Space.Fill trackSize={true}>\n                <DraggableUI\n                  id={1}\n                  onDragStart={onDragStart}\n                  onDragEnd={onDragEnd}\n                  onDragOver={onDragOver}\n                  onDrop={onDrop}\n                  getDivContent={getDivContent}\n                  draggingId={draggingId}\n                  divs={divs}\n                />\n              </Space.Fill>\n              <Space.BottomResizable\n                size=\"5%\"\n                touchHandleSize={20}\n                trackSize={true}\n                scrollable={true}\n              >\n                <Space.Fill>\n                  <DraggableUI\n                    id={2}\n                    onDragStart={onDragStart}\n                    onDragEnd={onDragEnd}\n                    onDragOver={onDragOver}\n                    onDrop={onDrop}\n                    getDivContent={getDivContent}\n                    draggingId={draggingId}\n                    divs={divs}\n                  />\n                </Space.Fill>\n              </Space.BottomResizable>\n            </Space.LeftResizable>\n            <Space.Fill\n              size=\"30%\"\n              touchHandleSize={20}\n              trackSize={true}\n              scrollable={true}\n            >\n              <Space.Fill trackSize={true}>\n                <DraggableUI\n                  id={3}\n                  onDragStart={onDragStart}\n                  onDragEnd={onDragEnd}\n                  onDragOver={onDragOver}\n                  onDrop={onDrop}\n                  getDivContent={getDivContent}\n                  draggingId={draggingId}\n                  divs={divs}\n                />\n              </Space.Fill>\n              <Space.BottomResizable\n                size=\"5%\"\n                touchHandleSize={20}\n                trackSize={true}\n                scrollable={true}\n              >\n                <Space.Fill>\n                  <DraggableUI\n                    id={4}\n                    onDragStart={onDragStart}\n                    onDragEnd={onDragEnd}\n                    onDragOver={onDragOver}\n                    onDrop={onDrop}\n                    getDivContent={getDivContent}\n                    draggingId={draggingId}\n                    divs={divs}\n                  />\n                </Space.Fill>\n              </Space.BottomResizable>\n            </Space.Fill>\n          </Space.Fill>\n        </Space.Bottom>\n      </Space.ViewPort>\n    </div>\n  );\n};\n\nexport default DraggableApp;"
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Ok, Make file 15 entirely and only the file 15"
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "//file: src/index.js\n\nimport React from \"https://esm.sh/react\";\nimport ReactDOM from \"https://esm.sh/react-dom\";\nimport { setup as twindSetup } from \"https://cdn.skypack.dev/twind/shim\";\nimport DraggableApp from \"./App\";\n\ntwindSetup({\n  darkMode: \"media\",\n  theme: {\n    extend: {\n      backgroundColor: {\n        dark: \"#111827\",\n        light: \"#d4d4d4\",\n      },\n      textColor: {\n        light: \"#d4d4d4\",\n        dark: \"#111827\",\n      },\n      borderColor: {\n        light: \"#d4d4d4\",\n        dark: \"#111827\",\n      },\n      animation: {\n        fade: \"fadeOut 5s ease-in-out\",\n        appear: \"fadeIn 0.2s ease-in-out\",\n      },\n      // that is actual animation\n      keyframes: (theme) => ({\n        fadeOut: {\n          \"0%\": { opacity: \"100%\" },\n          \"100%\": { opacity: \"0%\" },\n        },\n        fadeIn: {\n          \"0%\": { opacity: \"0%\" },\n          \"100%\": { opacity: \"100%\" },\n        },\n      }),\n    },\n  },\n  preflight: {\n    \".cursors-layer > .monaco-mouse-cursor-text\": {\n      position: \"absolute !important\",\n      //color: 'black !important',\n      //'background-color':'white',\n    },\n    \".cursors-layer >  .monaco-mouse-cursor-text::before\": {\n      content: '\"\"',\n      position: \"absolute\",\n      left: \"0\",\n      top: \"0\",\n      bottom: \"0\",\n      width: \"1px\",\n      backgroundColor: \"white\",\n    },\n  },\n});\n\nReactDOM.render(<DraggableApp />, document.getElementById(\"app\"));"
                }
            ]
        },
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": "Ok, Make the index.html"
                }
            ]
        },
        {
            "role": "assistant",
            "content": [
                {
                    "type": "text",
                    "text": "//file: src/index.html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Draggable Divs App with Blur Effect</title>\n</head>\n<body>\n  <div id=\"app\"></div>\n  <script src=\"https://js.puter.com/v2/\"></script>\n  <script type=\"module\" src=\"./src/index.js\"></script>\n</body>\n</html>"
                }
            ]
        }
    ]

def createFile(text):

    firstLine = text.split("\n")[0]
    print(firstLine)
    
    try:
        file_path = firstLine.split("//file: ")[1]
        print(file_path)
    except:
        print("No file path found")
        return
    
    

    # Create the directory if it doesn't exist
    directory = os.path.dirname(file_path)
    if not os.path.exists(directory):
        os.makedirs(directory)

    # Write the content to the file
    with open(file_path, "w") as file:
        file.write(text.split("\n", 1)[1])

    print(f"File '{file_path}' created successfully.")

for mes in messages:
    print("")
    print("########### Debut ###########")
    content=mes['content'][0]['text']
    if mes['role']=="assistant":
        createFile(content)

    print("")
    print("")


